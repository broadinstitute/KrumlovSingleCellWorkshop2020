[
["index.html", "ANALYSIS OF SINGLE CELL RNA-SEQ DATA 1 Introduction 1.1 COURSE OVERVIEW 1.2 TARGETED AUDIENCE &amp; ASSUMED BACKGROUND 1.3 COURSE FORMAT 1.4 Getting Started 1.5 SESSION CONTENT", " ANALYSIS OF SINGLE CELL RNA-SEQ DATA Kirk Gosik 01/16/2020 1 Introduction 1.1 COURSE OVERVIEW In recent years single cell RNA-seq (scRNA-seq) has become widely used for transcriptome analysis in many areas of biology. In contrast to bulk RNA-seq, scRNA-seq provides quantitative measurements of the expression of every gene in a single cell. However, to analyze scRNA-seq data, novel methods are required and some of the underlying assumptions for the methods developed for bulk RNA-seq experiments are no longer valid. In this course we will cover all steps of the scRNA-seq processing, starting from the raw reads coming off the sequencer. The course includes common analysis strategies, using state-of-the-art methods and we also discuss the central biological questions that can be addressed using scRNA-seq. 1.2 TARGETED AUDIENCE &amp; ASSUMED BACKGROUND This course is aimed at researchers and technical workers who are or will be analyzing scRNA-seq data. The material is suitable both for experimentalists who want to learn more about data-analysis as well as computational biologists who want to learn about scRNASeq methods. Examples demonstrated in this course can be applied to any experimental protocol or biological system. The requirements for this course are: 1. Working knowledge of unix (managing files, running programs) 2. Programming experience in R (writing a function, basic I/O operations, variable types, using packages). Bioconductor experience is a plus. 3. Familiarity with next-generation sequencing data and its analyses (using alignment and quantification tools for bulk sequencing data) 1.3 COURSE FORMAT The course will be delivered over the course of five days. Each day will include a lecture and laboratory component. The lecture will introduce the topics of discussion and the laboratory sessions will be focused on practical hands-on analysis of scRNA-seq data. These sessions will involve a combination of both mirroring exercises with the instructor to demonstrate a skill as well as applying these skills on your own to complete individual exercises. After and during each exercise, interpretation of results will be discussed as a group. Computing will be done using a combination of tools installed on the attendees laptop computer and web resources accessed via web browser. 1.4 Getting Started 1.5 SESSION CONTENT 1.5.1 Introduction Overview of course General introduction: HCA/KCO overview Comparison of Bulk and single cell RNA-Seq Overview of available scRNA-seq technologies (10x) and experimental protocols scRNA-Seq experimental design and analysis workflow? 1.5.2 Transcriptome Quantification Read &amp; UMI counting (Kallisto alignment-free pseudocounts as well), how RSEM works (length dependence, sequencing depth, multimapping reads), CellRanger (dropest), bustools 10x barcode structure and links to Perturb-seq Gene length &amp; coverage Gene expression units (count data Smart-seq2 counts or 10x UMIs vs expression data) Some R overview slides, https://r4ds.had.co.nz/ 1.5.3 Expression QC and Normalization What CellRanger does for quality filtering PBMC data Normalisation methods https://www.nature.com/articles/nmeth.4292 Doublets, empty droplets Barcode swapping Regression with technical covariates What about imputation? 1.5.4 Data Wrangling scRNAseq Data structures and file formats for single-cell data Quality control of cells and genes (doublets, ambient, empty drops) Data exploration: violin plots… Introducing Seurat object Genes House keeping genes Mitochondrial genes (never used these ones) Filter - Do we remove both cells and genes here? Normalize (introduce more options, other than log transform?) Find variable genes (Is it a first reduction? Why the binning?) Scaling Regression Heatmap of desired genes? Sigantures? 1.5.5 Identifying Cell Populations Feature selection Dimensionality reduction Clustering and assigning identity (Louvain, NMF, topic models, variational autoencoder) Differential expression tests 1.5.6 Feature Selection and Cluster Analysis Parameters and clustering Comparison of feature selection methods "],
["transcriptome-quantification-1.html", "2 Transcriptome Quantification", " 2 Transcriptome Quantification "],
["expression-qc-and-normalization-1.html", "3 Expression QC and Normalization", " 3 Expression QC and Normalization "],
["data-wrangling-scrnaseq-1.html", "4 Data Wrangling scRNAseq 4.1 Goal 4.2 Introduction 4.3 Filtering low-quality cells 4.4 Beginning with Seurat: http://satijalab.org/seurat/ 4.5 Preprocessing step 1 : Filter out low-quality cells 4.6 Examine contents of Seurat object 4.7 Detection of variable genes across the single cells 4.8 Gene set expression across cells", " 4 Data Wrangling scRNAseq 4.1 Goal To give you experience with the analysis of single cell RNA sequencing (scRNA-seq) including performing quality control and identifying cell type subsets. To introduce you to scRNA-seq analysis using the Seurat package. 4.2 Introduction Data produced in a single cell RNA-seq experiment has several interesting characteristics that make it distinct from data produced in a bulk population RNA-seq experiment. Two characteristics that are important to keep in mind when working with scRNA-Seq are drop-out (the excessive amount of zeros due to limiting mRNA) and the potential for quality control (QC) metrics to be confounded with biology. This combined with the ability to measure heterogeniety from cells in samples has shifted the field away from the typical analysis in population-based RNA-Seq. Here we demonstrate some approaches to quality control, followed by identifying and analyzing cell subsets. For this tutorial, we will be analyzing the a dataset of Non-Small Cell Lung Cancer Cells (NSCLC) freely available from 10X Genomics (https://support.10xgenomics.com/single-cell-vdj/datasets/2.2.0/vdj_v1_hs_nsclc_5gex), using the Seurat R package (http://satijalab.org/seurat/), a popular and powerful set of tools to conduct scRNA-seq analysis in R. In this dataset, there are 7802 single cells that were sequenced on the Illumina NovaSeq 6000. Please note this tutorial borrows heavily from Seurat’s tutorials, so feel free to go through them in more detail. 4.2.1 Load necessary packages When loading libraries, we are asking R to load code for us written by someone else. It is a convenient way to leverage and reproduce methodology developed by others. library(Seurat) library(dplyr) library(Matrix) library(gdata) 4.2.2 Read in NSCLC counts matrix. The data for Non-Small Cell Lung Cancer Cells (NSCLC) is freely available from 10X Genomics (https://support.10xgenomics.com/single-cell-vdj/datasets/2.2.0/vdj_v1_hs_nsclc_5gex). We start by reading in the counts matrix generated by the Cell Ranger count program. Task: Change the directory name to mydir/ where you saved your data dirname &lt;- &quot;/Users/kgosik/Documents/data/cellranger/pbmc3k/&quot; counts_matrix_filename = paste0(dirname,&quot;/filtered_gene_bc_matrices/hg19/&quot;) counts &lt;- Read10X(data.dir = counts_matrix_filename) # Seurat function to read in 10x count data # To minimize memory use on the docker - choose only the first 1000 cells counts &lt;- counts[,1:1000] 4.2.3 Let’s examine the sparse counts matrix counts[1:10, 1:3] ## 10 x 3 sparse Matrix of class &quot;dgCMatrix&quot; ## AAACATACAACCAC AAACATTGAGCTAC AAACATTGATCAGC ## MIR1302-10 . . . ## FAM138A . . . ## OR4F5 . . . ## RP11-34P13.7 . . . ## RP11-34P13.8 . . . ## AL627309.1 . . . ## RP11-34P13.14 . . . ## RP11-34P13.9 . . . ## AP006222.2 . . . ## RP4-669L17.10 . . . Here we see the upper left corner of the sparse matrix. The columns are indexed by 10x cell barcodes (each 16 nt long), and the rows are the gene names. We mentioned these matrices are sparse, here we see only zeroes (indicated by the “.” symbol); this is the most common value in these sparse matrices. Next, let us look at the dimensions of this matrix. 4.2.4 How big is the matrix? dim(counts) # report number of genes (rows) and number of cells (columns) ## [1] 32738 1000 Here we see the counts matrix has 33694 genes and 7802 cells. 4.2.5 How much memory does a sparse matrix take up relative to a dense matrix? object.size(counts) # size in bytes ## [1] 12451520 bytes object.size(as.matrix(counts)) # size in bytes ## [1] 264189072 bytes We see here that the sparse matrix takes 225 Mb in memory while storing the matrix in a dense format (where all count values including zeros are stored) takes almost 10 times as much memory! This memory saving is very important, especially as data sets are now being created that are beyond a million cells. These matrices can become unmanageable without special computing resources. In the sparse representation, we assume that the majority of count values in a matrix are zero. We only store the non-zero values. This is implemented in the Matrix package using a dgTMatrix object. 4.3 Filtering low-quality cells You can learn a lot about your scRNA-seq data’s quality with simple plotting. Let’s do some plotting to look at the number of reads per cell, reads per genes, expressed genes per cell (often called complexity), and rarity of genes (cells expressing genes). 4.3.1 Look at the summary counts for genes and cells counts_per_cell &lt;- Matrix::colSums(counts) counts_per_gene &lt;- Matrix::rowSums(counts) genes_per_cell &lt;- Matrix::colSums(counts &gt; 0) # count gene only if it has non-zero reads mapped. Task: In a similar way, can you calculate cells per genes? replace the ‘?’ in the command below #### cells_per_gene &lt;- Matrix::?(counts&gt;?) # only count cells where the gene is expressed cells_per_gene &lt;- Matrix::rowSums(counts&gt;0) # only count cells where the gene is expressed colSums and rowSums are functions that work on each row or column in a matrix and return the column sums or row sums as a vector. If this is true counts_per_cell should have 1 entry per cell. Let’s make sure the length of the returned vector matches the matrix dimension for column. How would you do that? ( Hint:length() ). Notes: 1. Matrix::colSums is a way to force functions from the Matrix library to be used. There are many libraries that implement colSums, we are forcing the one from the Matrix library to be used here to make sure it handles the dgTmatrix (sparse matrix) correctly. This is good practice. hist(log10(counts_per_cell+1),main=&#39;counts per cell&#39;,col=&#39;wheat&#39;) hist(log10(genes_per_cell+1), main=&#39;genes per cell&#39;, col=&#39;wheat&#39;) plot(counts_per_cell, genes_per_cell, log=&#39;xy&#39;, col=&#39;wheat&#39;) title(&#39;counts vs genes per cell&#39;) Here we see examples of plotting a new plot, the histogram. R makes this really easy with the hist function. We are also transforming the values to log10 before plotting, this is done with the log10 method. When logging count data, the + 1 is used to avoid log10(0) which is not defined. Can you make a histogram of counts per gene in log10 scale? hist(log10(counts_per_gene+1), main=&#39;counts per gene&#39;, col=&#39;wheat&#39;) ### hist(?(?+1), main=&#39;counts per gene&#39;, col=&#39;wheat&#39;) 4.3.2 Plot cells ranked by their number of detected genes. Here we rank each cell by its library complexity, ie the number of genes detected per cell. This is a very useful plot as it shows the distribution of library complexity in the sequencing run. One can use this plot to investigate observations (potential cells) that are actually failed libraries (lower end outliers) or observations that are cell doublets (higher end outliers). plot(sort(genes_per_cell), xlab=&#39;cell&#39;, log=&#39;y&#39;, main=&#39;genes per cell (ordered)&#39;) 4.4 Beginning with Seurat: http://satijalab.org/seurat/ 4.4.1 Creating a seurat object To analyze our single cell data we will use a seurat object. Can you create an Seurat object with the 10x data and save it in an object called ‘seurat’? hint: CreateSeuratObject(). Can you include only genes that are are expressed in 3 or more cells and cells with complexity of 350 genes or more? How many genes are you left with? How many cells? ### seurat&lt;-CreateSeuratObject(raw.data = counts, ? = 3, ? = 350, project = &quot;10X_NSCLC&quot;) seurat &lt;- CreateSeuratObject(counts = counts, min.cells = 3, min.features = 350, project = &quot;10X_NSCLC&quot;) Almost all our analysis will be on the single object, of class Seurat. This object contains various “slots” (designated by seurat@slotname) that will store not only the raw count data, but also the results from various computations below. This has the advantage that we do not need to keep track of inidividual variables of interest - they can all be collapsed into a single object as long as these slots are pre-defined. seurat@raw.data is a slot that stores the original gene count matrix. We can view the first 10 rows (genes) and the first 10 columns (cells). seurat@assays$RNA@counts[1:10,1:10] str(seurat) ## Formal class &#39;Seurat&#39; [package &quot;Seurat&quot;] with 12 slots ## ..@ assays :List of 1 ## .. ..$ RNA:Formal class &#39;Assay&#39; [package &quot;Seurat&quot;] with 7 slots ## .. .. .. ..@ counts :Formal class &#39;dgCMatrix&#39; [package &quot;Matrix&quot;] with 6 slots ## .. .. .. .. .. ..@ i : int [1:838799] 20 59 64 119 132 150 152 182 184 185 ... ## .. .. .. .. .. ..@ p : int [1:988] 0 779 2127 3253 4211 4732 5512 6292 7081 7612 ... ## .. .. .. .. .. ..@ Dim : int [1:2] 11766 987 ## .. .. .. .. .. ..@ Dimnames:List of 2 ## .. .. .. .. .. .. ..$ : chr [1:11766] &quot;LINC00115&quot; &quot;NOC2L&quot; &quot;KLHL17&quot; &quot;PLEKHN1&quot; ... ## .. .. .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. .. ..@ x : num [1:838799] 1 1 2 1 1 1 1 41 1 1 ... ## .. .. .. .. .. ..@ factors : list() ## .. .. .. ..@ data :Formal class &#39;dgCMatrix&#39; [package &quot;Matrix&quot;] with 6 slots ## .. .. .. .. .. ..@ i : int [1:838799] 20 59 64 119 132 150 152 182 184 185 ... ## .. .. .. .. .. ..@ p : int [1:988] 0 779 2127 3253 4211 4732 5512 6292 7081 7612 ... ## .. .. .. .. .. ..@ Dim : int [1:2] 11766 987 ## .. .. .. .. .. ..@ Dimnames:List of 2 ## .. .. .. .. .. .. ..$ : chr [1:11766] &quot;LINC00115&quot; &quot;NOC2L&quot; &quot;KLHL17&quot; &quot;PLEKHN1&quot; ... ## .. .. .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. .. ..@ x : num [1:838799] 1 1 2 1 1 1 1 41 1 1 ... ## .. .. .. .. .. ..@ factors : list() ## .. .. .. ..@ scale.data : num[0 , 0 ] ## .. .. .. ..@ key : chr &quot;rna_&quot; ## .. .. .. ..@ var.features : logi(0) ## .. .. .. ..@ meta.features:&#39;data.frame&#39;: 11766 obs. of 0 variables ## .. .. .. ..@ misc : NULL ## ..@ meta.data :&#39;data.frame&#39;: 987 obs. of 3 variables: ## .. ..$ orig.ident : Factor w/ 1 level &quot;10X_NSCLC&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## .. ..$ nCount_RNA : num [1:987] 2419 4898 3144 2637 980 ... ## .. ..$ nFeature_RNA: int [1:987] 779 1348 1126 958 521 780 780 789 531 550 ... ## ..@ active.assay: chr &quot;RNA&quot; ## ..@ active.ident: Factor w/ 1 level &quot;10X_NSCLC&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## .. ..- attr(*, &quot;names&quot;)= chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## ..@ graphs : list() ## ..@ neighbors : list() ## ..@ reductions : list() ## ..@ project.name: chr &quot;10X_NSCLC&quot; ## ..@ misc : list() ## ..@ version :Classes &#39;package_version&#39;, &#39;numeric_version&#39; hidden list of 1 ## .. ..$ : int [1:3] 3 1 1 ## ..@ commands : list() ## ..@ tools : list() ls(&quot;package:Seurat&quot;) ## [1] &quot;AddMetaData&quot; &quot;AddModuleScore&quot; ## [3] &quot;ALRAChooseKPlot&quot; &quot;as.CellDataSet&quot; ## [5] &quot;as.Graph&quot; &quot;as.loom&quot; ## [7] &quot;as.Seurat&quot; &quot;as.SingleCellExperiment&quot; ## [9] &quot;as.sparse&quot; &quot;Assays&quot; ## [11] &quot;AugmentPlot&quot; &quot;AverageExpression&quot; ## [13] &quot;BarcodeInflectionsPlot&quot; &quot;BlackAndWhite&quot; ## [15] &quot;BlueAndRed&quot; &quot;BoldTitle&quot; ## [17] &quot;BuildClusterTree&quot; &quot;CalculateBarcodeInflections&quot; ## [19] &quot;CaseMatch&quot; &quot;cc.genes&quot; ## [21] &quot;cc.genes.updated.2019&quot; &quot;CellCycleScoring&quot; ## [23] &quot;Cells&quot; &quot;CellScatter&quot; ## [25] &quot;CellSelector&quot; &quot;CollapseEmbeddingOutliers&quot; ## [27] &quot;CollapseSpeciesExpressionMatrix&quot; &quot;ColorDimSplit&quot; ## [29] &quot;CombinePlots&quot; &quot;Command&quot; ## [31] &quot;CreateAssayObject&quot; &quot;CreateDimReducObject&quot; ## [33] &quot;CreateGeneActivityMatrix&quot; &quot;CreateSeuratObject&quot; ## [35] &quot;CustomDistance&quot; &quot;CustomPalette&quot; ## [37] &quot;DarkTheme&quot; &quot;DefaultAssay&quot; ## [39] &quot;DefaultAssay&lt;-&quot; &quot;DietSeurat&quot; ## [41] &quot;DimHeatmap&quot; &quot;DimPlot&quot; ## [43] &quot;DoHeatmap&quot; &quot;DotPlot&quot; ## [45] &quot;ElbowPlot&quot; &quot;Embeddings&quot; ## [47] &quot;ExpMean&quot; &quot;ExportToCellbrowser&quot; ## [49] &quot;ExpSD&quot; &quot;ExpVar&quot; ## [51] &quot;FeatureLocator&quot; &quot;FeaturePlot&quot; ## [53] &quot;FeatureScatter&quot; &quot;FetchData&quot; ## [55] &quot;FindAllMarkers&quot; &quot;FindClusters&quot; ## [57] &quot;FindConservedMarkers&quot; &quot;FindIntegrationAnchors&quot; ## [59] &quot;FindMarkers&quot; &quot;FindNeighbors&quot; ## [61] &quot;FindTransferAnchors&quot; &quot;FindVariableFeatures&quot; ## [63] &quot;FontSize&quot; &quot;GeneSymbolThesarus&quot; ## [65] &quot;GetAssay&quot; &quot;GetAssayData&quot; ## [67] &quot;GetIntegrationData&quot; &quot;GetResidual&quot; ## [69] &quot;HoverLocator&quot; &quot;HTODemux&quot; ## [71] &quot;HTOHeatmap&quot; &quot;HVFInfo&quot; ## [73] &quot;Idents&quot; &quot;Idents&lt;-&quot; ## [75] &quot;IntegrateData&quot; &quot;JackStraw&quot; ## [77] &quot;JackStrawPlot&quot; &quot;JS&quot; ## [79] &quot;JS&lt;-&quot; &quot;Key&quot; ## [81] &quot;Key&lt;-&quot; &quot;L2CCA&quot; ## [83] &quot;L2Dim&quot; &quot;LabelClusters&quot; ## [85] &quot;LabelPoints&quot; &quot;Loadings&quot; ## [87] &quot;Loadings&lt;-&quot; &quot;LocalStruct&quot; ## [89] &quot;LogNormalize&quot; &quot;LogSeuratCommand&quot; ## [91] &quot;LogVMR&quot; &quot;MetaFeature&quot; ## [93] &quot;MinMax&quot; &quot;Misc&quot; ## [95] &quot;Misc&lt;-&quot; &quot;MixingMetric&quot; ## [97] &quot;MULTIseqDemux&quot; &quot;NoAxes&quot; ## [99] &quot;NoGrid&quot; &quot;NoLegend&quot; ## [101] &quot;NormalizeData&quot; &quot;OldWhichCells&quot; ## [103] &quot;pbmc_small&quot; &quot;PCAPlot&quot; ## [105] &quot;PCASigGenes&quot; &quot;PCHeatmap&quot; ## [107] &quot;PercentageFeatureSet&quot; &quot;PlotClusterTree&quot; ## [109] &quot;PolyDimPlot&quot; &quot;PolyFeaturePlot&quot; ## [111] &quot;PrepSCTIntegration&quot; &quot;Project&quot; ## [113] &quot;Project&lt;-&quot; &quot;ProjectDim&quot; ## [115] &quot;PurpleAndYellow&quot; &quot;Read10X&quot; ## [117] &quot;Read10X_h5&quot; &quot;ReadAlevin&quot; ## [119] &quot;ReadAlevinCsv&quot; &quot;ReadH5AD&quot; ## [121] &quot;Reductions&quot; &quot;RegroupIdents&quot; ## [123] &quot;RelativeCounts&quot; &quot;RenameCells&quot; ## [125] &quot;RenameIdents&quot; &quot;ReorderIdent&quot; ## [127] &quot;RestoreLegend&quot; &quot;RidgePlot&quot; ## [129] &quot;RotatedAxis&quot; &quot;RunALRA&quot; ## [131] &quot;RunCCA&quot; &quot;RunICA&quot; ## [133] &quot;RunLSI&quot; &quot;RunPCA&quot; ## [135] &quot;RunTSNE&quot; &quot;RunUMAP&quot; ## [137] &quot;SampleUMI&quot; &quot;ScaleData&quot; ## [139] &quot;ScoreJackStraw&quot; &quot;SCTransform&quot; ## [141] &quot;SelectIntegrationFeatures&quot; &quot;SetAssayData&quot; ## [143] &quot;SetIdent&quot; &quot;SetIntegrationData&quot; ## [145] &quot;SeuratAxes&quot; &quot;SeuratTheme&quot; ## [147] &quot;SpatialTheme&quot; &quot;SplitObject&quot; ## [149] &quot;StashIdent&quot; &quot;Stdev&quot; ## [151] &quot;StopCellbrowser&quot; &quot;SubsetByBarcodeInflections&quot; ## [153] &quot;SubsetData&quot; &quot;TF.IDF&quot; ## [155] &quot;Tool&quot; &quot;Tool&lt;-&quot; ## [157] &quot;TopCells&quot; &quot;TopFeatures&quot; ## [159] &quot;TransferData&quot; &quot;TSNEPlot&quot; ## [161] &quot;UMAPPlot&quot; &quot;UpdateSeuratObject&quot; ## [163] &quot;UpdateSymbolList&quot; &quot;VariableFeaturePlot&quot; ## [165] &quot;VariableFeatures&quot; &quot;VariableFeatures&lt;-&quot; ## [167] &quot;VizDimLoadings&quot; &quot;VlnPlot&quot; ## [169] &quot;WhichCells&quot; &quot;WhiteBackground&quot; 4.5 Preprocessing step 1 : Filter out low-quality cells The Seurat object initialization step above only considered cells that expressed at least 350 genes. Additionally, we would like to exclude cells that are damaged. A common metric to judge this (although by no means the only one) is the relative expression of mitochondrially derived genes. When the cells apoptose due to stress, their mitochondria becomes leaky and there is widespread RNA degradation. Thus a relative enrichment of mitochondrially derived genes can be a tell-tale sign of cell stress. Here, we compute the proportion of transcripts that are of mitochondrial origin for every cell (percent.mito), and visualize its distribution as a violin plot. We also use the GenePlot function to observe how percent.mito correlates with other metrics. # The number of genes and UMIs (nGene and nUMI) are automatically calculated # for every object by Seurat. For non-UMI data, nUMI represents the sum of # the non-normalized values within a cell We calculate the percentage of # mitochondrial genes here and store it in percent.mito using AddMetaData. # We use object@raw.data since this represents non-transformed and # non-log-normalized counts The % of UMI mapping to MT-genes is a common # scRNA-seq QC metric. # The [[ operator can add columns to object metadata. This is a great place to stash QC stats seurat[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(object = seurat, pattern = &quot;^MT-&quot;) # AddMetaData adds columns to object@meta.data, and is a great place to stash QC stats. # This also allows us to plot the metadata values using the Seurat&#39;s VlnPlot(). head(seurat@meta.data) # Before adding ## orig.ident nCount_RNA nFeature_RNA percent.mt ## AAACATACAACCAC 10X_NSCLC 2419 779 3.0177759 ## AAACATTGAGCTAC 10X_NSCLC 4898 1348 3.7974684 ## AAACATTGATCAGC 10X_NSCLC 3144 1126 0.8905852 ## AAACCGTGCTTCCG 10X_NSCLC 2637 958 1.7444065 ## AAACCGTGTATGCG 10X_NSCLC 980 521 1.2244898 ## AAACGCACTGGTAC 10X_NSCLC 2162 780 1.6651249 Task: Can add the percentage if mitochondrial genes to the seurat object meta data? If you dont remember the name of the parameter you can type ?AddMetaData in the console. VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), ncol = 3) Here we calculated the percent mitochondrial reads and added it to the Seurat object in the slot named meta.data. This allowed us to plot using the violin plot function provided by Seurat. A third metric we use is the number of house keeping genes expressed in a cell. These genes reflect commomn processes active in a cell and hence are a good global quality measure. They are also abundant and are usually steadliy expressed in cells, thus less sensitive to the high dropout. # Load the the list of house keeping genes hkgenes &lt;- read.table(&quot;/Users/kgosik/Documents/data/tirosh_house_keeping.txt&quot;, skip = 2) hkgenes &lt;- as.vector(hkgenes$V1) # remove hkgenes that were not found hkgenes.found &lt;- which(toupper(rownames(seurat@assays$RNA@data)) %in% hkgenes) Possible task: Feel like challenging yourself? write the code to do the following: 1. Sum the number of detected house keeping genes for each cell 2. Add this information as meta data to seurat 3. plot all metrics: “nGene”, “nUMI”, “percent.mito”,“n.exp.hkgenes” using VlnPlot 4. Scroll down to see if you got it! If you feel like going through a more guided version, scroll down and follow the instructions. Alternative task: Sum the number of detected house keeping genes for each cell, then add this to the meta data #### n.expressed.hkgenes &lt;- ?(seurat@data[hkgenes.found, ] &gt; ?) #### seurat &lt;- AddMetaData(object = ?, ? = ?, col.name = &quot;n.exp.hkgenes&quot;) n.expressed.hkgenes &lt;- Matrix::colSums(seurat@assays$RNA@data[hkgenes.found, ] &gt; 0) seurat &lt;- AddMetaData(object = seurat, metadata = n.expressed.hkgenes, col.name = &quot;n.exp.hkgenes&quot;) VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;,&quot;n.exp.hkgenes&quot;), nCol = 4) ## Warning in as_grob.default(plot): Cannot convert object of class numeric ## into a grob. ## Warning: Graphs cannot be vertically aligned unless the axis parameter is ## set. Placing graphs unaligned. ## Warning: Graphs cannot be horizontally aligned unless the axis parameter is ## set. Placing graphs unaligned. Is there a correlation between the measurements? For example, number of UMIs with number of genes? Possible task: Feel like challenging yourself? write the code to do the following: Can you plot the nGene vs nUMI (hint:GenePlot)? What is the correlation? Do you see a strange subpopulation? What do you think happened with these cells? seurat Scroll down to see the command Alternative task: Can you plot the nFeature_RNA vs nCount_RNA (hint:FeatureScatter)? What is the correlation? Do you see a strange subpopulation? What do you think happened with these cells? # FeatureScatter is typically used to visualize feature-feature relationships, but can be used # for anything calculated by the object, i.e. columns in object metadata, PC scores etc. plot1 &lt;- FeatureScatter(seurat, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) plot2 &lt;- FeatureScatter(seurat, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) CombinePlots(plots = list(plot1, plot2)) ### GenePlot(object = seurat, gene1 = ?, gene2 = ?) FeatureScatter(object = seurat, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) 4.6 Examine contents of Seurat object str(seurat) These are the slots in the Seurat object. Some of the slots are automatically updated by Seurat as you move through analysis. Take a moment to look through the information, knowing the slots allow you to leverage work Seurat has already done for you. VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;), group.by = c(&#39;orig.ident&#39;)) Here we plot the number of genes per cell by what Seurat calls orig.ident. Identity is a concept that is used in the Seurat object to refer to the cell identity. In this case, the cell identity is 10X_NSCLC, but after we cluster the cells, the cell identity will be whatever cluster the cell belongs to. We will see how identity updates as we go throught the analysis. Next, let’s filter the cells based on the quality control metrics. Filter based on: 1. nGene 2. percent.mito 3. n.exp.hkgenes Task: Change the thresholds to what you think they should be according to the violin plots VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;,&quot;percent.mt&quot;,&quot;n.exp.hkgenes&quot;), nCol = 3) #### seurat &lt;- FilterCells(object = seurat, subset.names = c(&quot;nGene&quot;, &quot;percent.mito&quot;,&quot;n.exp.hkgenes&quot;), low.thresholds = c(350, -Inf,55), high.thresholds = c(5000, 0.1, Inf)) How many cells are you left with? seurat 4.6.1 Preprocessing step 2 : Expression normalization After removing unwanted genes cells from the dataset, the next step is to normalize the data. By default, we employ a global-scaling normalization method “LogNormalize” that normalizes the gene expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. There have been many methods to normalize the data, but this is the simplest and the most intuitive. The division by total expression is done to change all expression counts to a relative measure, since experience has suggested that technical factors (e.g. capture rate, efficiency of reverse transcription) are largely responsible for the variation in the number of molecules per cell, although genuine biological factors (e.g. cell cycle stage, cell size) also play a smaller, but non-negligible role. The log-transformation is a commonly used transformation that has many desirable properties, such as variance stabilization (can you think of others?). seurat &lt;- NormalizeData(object = seurat, normalization.method = &quot;LogNormalize&quot;, scale.factor = 1e4) Well there you have it! A filtered and normalized gene-expression data set. A great accomplishment for your first dive into scRNA-Seq analysis. Well done! 4.7 Detection of variable genes across the single cells Seurat calculates highly variable genes and focuses on these for downstream analysis. FindVariableGenes calculates the average expression and dispersion for each gene, places these genes into bins, and then calculates a z-score for dispersion within each bin. This helps control for the relationship between variability and average expression. This function is unchanged from (Macosko et al.), but new methods for variable gene expression identification are coming soon. We suggest that users set these parameters to mark visual outliers on the dispersion plot, but the exact parameter settings may vary based on the data type, heterogeneity in the sample, and normalization strategy. The parameters here identify ~3,000 variable genes, and represent typical parameter settings for UMI data that is normalized to a total of 1e4 molecules. #seurat &lt;- FindVariableGenes(object = seurat, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5, num.bin=20) # if this fails, experiment with the num.bin setting seurat &lt;- FindVariableFeatures(object = seurat, selection.method = &quot;vst&quot;, nfeatures = 2000) # Identify the 10 most highly variable genes top10 &lt;- head(VariableFeatures(seurat), 10) We can see the Seurat object slots have updated for the FindVariableGenes section. Let’s use the slot to see how many variable genes we found. str(seurat) length(x = seurat@assays$RNA@var.features) Task: how does changing the parameters for find variable genes function changes the number of the found genes? Play with the parameters - what makes the function find more variable genes? less? seurat &lt;- FindVariableFeatures(object = seurat, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 1, y.cutoff = 0.5, num.bin=40, do.plot = FALSE) length(seurat@assays$RNA@var.features) seurat &lt;- FindVariableFeatures(object = seurat, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 1, y.cutoff = 0.5, num.bin=10, do.plot = FALSE) length(seurat@assays$RNA@var.features) seurat &lt;- FindVariableFeatures(object = seurat, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 1, y.cutoff = 0.5, num.bin=20, do.plot = FALSE) length(seurat@assays$RNA@var.features) seurat &lt;- FindVariableFeatures(object = seurat, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.2, x.high.cutoff = 1, y.cutoff = 0.5, num.bin=20, do.plot = FALSE) length(seurat@assays$RNA@var.features) seurat &lt;- FindVariableFeatures(object = seurat, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 0.1, y.cutoff = 0.5, num.bin=20, do.plot = FALSE) length(seurat@assays$RNA@var.features) seurat &lt;- FindVariableFeatures(object = seurat, mean.function = ExpMean, dispersion.function = LogVMR, x.low.cutoff = 0.0125, x.high.cutoff = 1, y.cutoff = 2, num.bin=10, do.plot = FALSE) length(seurat@assays$RNA@var.features) # plot variable features with and without labels plot1 &lt;- VariableFeaturePlot(seurat) plot2 &lt;- LabelPoints(plot = plot1, points = top10, repel = TRUE) ## When using repel, set xnudge and ynudge to 0 for optimal results CombinePlots(plots = list(plot1, plot2)) 4.8 Gene set expression across cells Sometimes we want to ask what is the expression of a set of a genes across cells. This set of genes may make up a gene expression program we are interested in. Another benefit at looking at gene sets is it reduces the effects of drop outs. Below, we look at genes involved in: T cells, the cell cycle and the stress signature upon cell dissociation. We calculate these genes average expression levels on the single cell level, while controlling for technical effects. # Read in a list of cell cycle markers, from Tirosh et al, 2015. # We can segregate this list into markers of G2/M phase and markers of S phase. cc.genes &lt;- readLines(&quot;/Users/kgosik/Documents/data/regev_lab_cell_cycle_genes.txt&quot;) s.genes &lt;- cc.genes[1:43] g2m.genes &lt;- cc.genes[44:97] seurat &lt;- CellCycleScoring(object = seurat, s.features = s.genes, g2m.features = g2m.genes, set.ident = T) Task: Use markers for dissociation to calculate dissociation score # Genes upregulated during dissociation of tissue into single cells. genes.dissoc &lt;- c(&quot;ATF3&quot;, &quot;BTG2&quot;, &quot;CEBPB&quot;, &quot;CEBPD&quot;, &quot;CXCL3&quot;, &quot;CXCL2&quot;, &quot;CXCL1&quot;, &quot;DNAJA1&quot;, &quot;DNAJB1&quot;, &quot;DUSP1&quot;, &quot;EGR1&quot;, &quot;FOS&quot;, &quot;FOSB&quot;, &quot;HSP90AA1&quot;, &quot;HSP90AB1&quot;, &quot;HSPA1A&quot;, &quot;HSPA1B&quot;, &quot;HSPA1A&quot;, &quot;HSPA1B&quot;, &quot;HSPA8&quot;, &quot;HSPB1&quot;, &quot;HSPE1&quot;, &quot;HSPH1&quot;, &quot;ID3&quot;, &quot;IER2&quot;, &quot;JUN&quot;, &quot;JUNB&quot;, &quot;JUND&quot;, &quot;MT1X&quot;, &quot;NFKBIA&quot;, &quot;NR4A1&quot;, &quot;PPP1R15A&quot;, &quot;SOCS3&quot;, &quot;ZFP36&quot;) #### seurat &lt;- ?(?, genes.list = list(?), ctrl.size = 20, enrich.name = &quot;genes_dissoc&quot;) seurat &lt;- AddModuleScore(seurat, features = list(genes.dissoc), ctrl.size = 20, enrich.name = &quot;genes_dissoc&quot;) Task: Plot the correlation between number of genes and S score. How do we know the name of these scores in the seurat meta data? ### GenePlot(seurat, &quot;S.Score&quot;, &quot;nGene&quot;) FeatureScatter(seurat, &quot;S.Score&quot;, &quot;nFeature_RNA&quot;) Bonus: Can you cluster the data based on the variable genes alone? Congratulations! You can identify and visualize cell subsets and the marker genes that describe these cell subsets. This is a very powerful analysis pattern often seen in publications. Well done! "],
["identifying-cell-populations-1.html", "5 Identifying Cell Populations 5.1 Google Slides", " 5 Identifying Cell Populations 5.1 Google Slides "],
["feature-selection-and-cluster-analysis-1.html", "6 Feature Selection and Cluster Analysis 6.1 Abstract 6.2 Seurat Tutorial 6.3 Feature Selection 6.4 Other Options For Analysis", " 6 Feature Selection and Cluster Analysis 6.1 Abstract Many methods have been used to determine differential gene expression from single-cell RNA (scRNA)-seq data. We evaluated 36 approaches using experimental and synthetic data and found considerable differences in the number and characteristics of the genes that are called differentially expressed. Prefiltering of lowly expressed genes has important effects, particularly for some of the methods developed for bulk RNA-seq data analysis. However, we found that bulk RNA-seq analysis methods do not generally perform worse than those developed specifically for scRNA-seq. We also present conquer, a repository of consistently processed, analysis-ready public scRNA-seq data sets that is aimed at simplifying method evaluation and reanalysis of published results. Each data set provides abundance estimates for both genes and transcripts, as well as quality control and exploratory analysis reports. (???) Cells are the basic building blocks of organisms and each cell is unique. Single-cell RNA sequencing has emerged as an indispensable tool to dissect the cellular heterogeneity and decompose tissues into cell types and/or cell states, which offers enormous potential for de novo discovery. Single-cell transcriptomic atlases provide unprecedented resolution to reveal complex cellular events and deepen our understanding of biological systems. In this review, we summarize and compare single-cell RNA sequencing technologies, that were developed since 2009, to facilitate a well-informed choice of method. The applications of these methods in different biological contexts are also discussed. We anticipate an ever-increasing role of single-cell RNA sequencing in biology with further improvement in providing spatial information and coupling to other cellular modalities. In the future, such biological findings will greatly benefit medical research. (???) 6.2 Seurat Tutorial Task: Change the directory name to mydir/ where you saved your data library(Seurat) library(dplyr) library(ggplot2) library(CountClust) dirname &lt;- &quot;/Users/kgosik/Documents/data/cellranger/pbmc3k/&quot; counts_matrix_filename = paste0(dirname,&quot;/filtered_gene_bc_matrices/hg19/&quot;) counts &lt;- Read10X(data.dir = counts_matrix_filename) # Seurat function to read in 10x count data # To minimize memory use on the docker - choose only the first 1000 cells counts &lt;- counts[,1:1000] ### seurat&lt;-CreateSeuratObject(raw.data = counts, ? = 3, ? = 350, project = &quot;10X_NSCLC&quot;) seurat &lt;- CreateSeuratObject(counts = counts, min.cells = 3, min.features = 350, project = &quot;10X_NSCLC&quot;) 6.2.1 Preprocessing Steps This was all covered in the last Lab! # The number of genes and UMIs (nGene and nUMI) are automatically calculated # for every object by Seurat. For non-UMI data, nUMI represents the sum of # the non-normalized values within a cell We calculate the percentage of # mitochondrial genes here and store it in percent.mito using AddMetaData. # We use object@raw.data since this represents non-transformed and # non-log-normalized counts The % of UMI mapping to MT-genes is a common # scRNA-seq QC metric. seurat[[&quot;percent.mt&quot;]] &lt;- PercentageFeatureSet(object = seurat, pattern = &quot;^MT-&quot;) ##VlnPlot(object = seurat, features = c(&quot;nFeature_RNA&quot;, &quot;nCount_RNA&quot;, &quot;percent.mt&quot;), ncol = 3) # GenePlot is typically used to visualize gene-gene relationships, but can # be used for anything calculated by the object, i.e. columns in # object@meta.data, PC scores etc. Since there is a rare subset of cells # with an outlier level of high mitochondrial percentage and also low UMI # content, we filter these as well par(mfrow = c(1, 2)) FeatureScatter(object = seurat, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;percent.mt&quot;) FeatureScatter(object = seurat, feature1 = &quot;nCount_RNA&quot;, feature2 = &quot;nFeature_RNA&quot;) Already A Subset of the Data This is not run becuase we are already working with a subset. This is here for reference. # We filter out cells that have unique gene counts over 2,500 or less than # 200 Note that low.thresholds and high.thresholds are used to define a # &#39;gate&#39;. -Inf and Inf should be used if you don&#39;t want a lower or upper # threshold. seurat &lt;- SubsetData(object = seurat, subset.names = c(&quot;nFeature_RNA&quot;, &quot;percent.mt&quot;), low.thresholds = c(200, -Inf), high.thresholds = c(2500, 0.1)) ## Warning: &#39;SubsetData&#39; is deprecated. ## Use &#39;subset&#39; instead. ## See help(&quot;Deprecated&quot;) ## Warning: &#39;OldWhichCells&#39; is deprecated. ## Use &#39;WhichCells&#39; instead. ## See help(&quot;Deprecated&quot;) seurat &lt;- NormalizeData(object = seurat, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) seurat &lt;- FindVariableFeatures(object = seurat, mean.function = ExpMean, dispersion.function = LogVMR, do.plot = FALSE) ## Warning: The following arguments are not used: do.plot 6.2.2 Start of Identifying Cell Types 6.2.2.1 Scaling This part is where you mean center the data, substract the mean. You also divide by the standard deviation to make everything to a ‘standard normal’, where the mean is zero and the standard deviation is 1. seurat &lt;- ScaleData(object = seurat, vars.to.regress = c(&quot;batch&quot;, &quot;percent.mt&quot;)) ## Regressing out batch, percent.mt ## Centering and scaling data matrix Try Regressing Other Variables ## randomly making a batch id data.frame batch_ids &lt;- data.frame(barcode = rownames(seurat@meta.data), batch_id = sample(0:2, NROW(seurat@meta.data), replace = TRUE), stringsAsFactors = FALSE) row.names(batch_ids) &lt;- row.names(seurat@meta.data) seurat &lt;- AddMetaData(object = seurat, metadata = batch_ids, col.name = NULL) seurat &lt;- ScaleData(object = seurat, vars.to.regress = &#39;batch_id&#39;) ## Regressing out batch_id ## Centering and scaling data matrix 6.2.2.2 Perform linear dimensional reduction (PCA) This will run pca on the seurat &lt;- RunPCA(object = seurat, pc.genes = seurat@assays$RNA@var.genes, do.print = TRUE, pcs.print = 1:5, genes.print = 5) ## PC_ 1 ## Positive: MALAT1, RPS27A, LTB, IL32, RPL10A, AES, GLTSCR2, RPL19, CD69, ACAP1 ## B2M, CD27, STK17A, CTSW, CD247, JUN, GIMAP5, RARRES3, SELL, CCL5 ## GZMA, CST7, CD8B, MYC, MAL, C12orf57, TRAF3IP3, CMPK1, TNFAIP8, GZMK ## Negative: CST3, AIF1, TYROBP, LST1, FTL, FTH1, FCER1G, S100A9, LYZ, CFD ## FCN1, CD68, TYMP, LGALS1, IFITM3, SPI1, SERPINA1, CTSS, PSAP, S100A8 ## LGALS2, S100A11, SAT1, IFI30, CFP, COTL1, LGALS3, PYCARD, TKT, S100A6 ## PC_ 2 ## Positive: NKG7, GZMB, CST7, PRF1, GZMA, FGFBP2, CTSW, B2M, GNLY, GZMH ## CCL5, SPON2, CD247, CCL4, XCL2, AKR1C3, FCGR3A, CLIC3, HOPX, SRGN ## IL32, TTC38, S100A4, APMAP, ANXA1, RARRES3, CD99, PRSS23, TPST2, HAVCR2 ## Negative: CD79A, MS4A1, HLA-DQA1, HLA-DRA, HLA-DQB1, TCL1A, LINC00926, CD79B, VPREB3, CD74 ## HLA-DMA, HLA-DRB1, HLA-DPB1, HLA-DMB, BANK1, HLA-DPA1, HLA-DQA2, HLA-DRB5, CD37, EAF2 ## KIAA0125, LTB, SPIB, IRF8, BLNK, IGLL5, PPAPDC1B, RPL10A, RPL19, SWAP70 ## PC_ 3 ## Positive: HIST1H2AC, PF4, TSC22D1, ACRBP, PPBP, TMEM40, PTCRA, MAP3K7CL, SDPR, MMD ## TUBB1, HIST1H2BJ, NRGN, GNG11, ITGA2B, ESAM, CLDN5, CMTM5, SPARC, SLC40A1 ## RGS18, NEXN, RUFY1, PCP2, GP9, F13A1, CD9, PNMA1, CA2, ARG2 ## Negative: RPL19, MT-CO1, S100A8, S100A4, LGALS2, S100A9, S100A6, TYROBP, CYBA, TSPO ## NACA, CCL3, FCN1, MS4A6A, CD14, GSTP1, NKG7, PRF1, IFI6, LGALS1 ## CST7, LYZ, GZMA, NEAT1, FGFBP2, NCF2, MALAT1, RPL10A, CDA, VIM ## PC_ 4 ## Positive: VIM, FYB, TMSB4X, RGS10, S100A8, IL32, GIMAP7, S100A6, S100A4, MAL ## NDFIP1, NGFRAP1, CD27, GIMAP5, S100A9, CD14, S100A12, NELL2, CD44, LGALS2 ## S100A11, MS4A6A, TRABD2A, LYZ, C12orf57, FCN1, AIF1, CD5, TSPO, ANXA1 ## Negative: HLA-DQA1, CD79A, CD79B, MS4A1, HLA-DQB1, CD74, HLA-DPB1, HLA-DRB1, HLA-DPA1, HLA-DRA ## LINC00926, HLA-DQA2, TCL1A, HLA-DRB5, VPREB3, GZMB, FGFBP2, HLA-DMB, BANK1, GNLY ## PRF1, NKG7, HLA-DMA, CST7, PDLIM1, KIAA0125, SPIB, SPON2, EAF2, FCGR3A ## PC_ 5 ## Positive: LTB, NAP1L1, CKB, VMO1, MS4A4A, EMR2, CDKN1C, NACA, HES4, LYPD2 ## PILRA, MS4A7, TRAF3IP3, PTGES3, LILRA3, GDI2, VIM, RP11-290F20.3, RPS27A, RPL10A ## TUBA1B, CXCL16, IFITM2, CYTIP, ANXA5, CD27, CTD-2006K23.1, ICAM4, ABI3, TPPP3 ## Negative: S100A8, LGALS2, GZMB, MS4A6A, S100A9, FGFBP2, GNLY, CD14, NKG7, S100A12 ## SPON2, CST7, CCL3, PRF1, GSTP1, GPX1, CCL4, VCAN, GZMA, TYROBP ## PRSS23, CCL5, AKR1C3, XCL2, GZMH, LYZ, IGFBP7, FCN1, CYBA, HAVCR2 6.2.2.3 Perform linear dimensional reduction (ICA) Try running Independent Component Analysis. If you need help with the inputs try using the ?RunICA menu. seurat &lt;- RunICA(seurat, nics = 5) ## IC_ 1 ## Positive: IL32, MALAT1, RPS27A, LTB, AES, B2M, CD27, GIMAP7, ACAP1, GIMAP5 ## RPL10A, RARRES3, TRAF3IP3, GLTSCR2, MAL, CD247, JUN, C12orf57, CD69, RPL19 ## ITM2A, NGFRAP1, CD8B, NDFIP1, TNFAIP8, NELL2, TRABD2A, TUBA4A, CMPK1, STK17A ## Negative: HLA-DRA, HLA-DRB1, TYROBP, CST3, S100A9, FTL, LYZ, LGALS2, S100A8, HLA-DPA1 ## FCN1, HLA-DRB5, CD74, HLA-DPB1, FCER1G, FTH1, LST1, AIF1, CTSS, TYMP ## LGALS1, CYBA, CFD, HLA-DMA, SPI1, CD68, GSTP1, PSAP, PYCARD, MS4A6A ## IC_ 2 ## Positive: S100A4, S100A6, S100A8, S100A9, TMSB4X, S100A11, TYROBP, LGALS1, FCN1, LYZ ## AIF1, CST3, LGALS2, FCER1G, LST1, CFD, TYMP, CD14, FTL, LGALS3 ## MS4A6A, FTH1, SRGN, CD68, NEAT1, PSAP, GAPDH, TIMP1, GSTP1, VIM ## Negative: CD79A, MS4A1, CD79B, HLA-DQA1, LINC00926, TCL1A, HLA-DQB1, VPREB3, BANK1, HLA-DQA2 ## KIAA0125, SPIB, CD74, LTB, PDLIM1, HLA-DPB1, PPAPDC1B, HLA-DMB, BLNK, EAF2 ## IGLL5, HLA-DRA, SWAP70, BLK, HLA-DPA1, CD37, RPS27A, HLA-DRB1, AC079767.4, MZB1 ## IC_ 3 ## Positive: MALAT1, TCL1A, S100A12, RPS27A, LINC00926, S100A8, CCL5, RPL19, RPL10A, MS4A1 ## VCAN, CD79A, CTSW, KCNG1, VPREB3, AC003075.4, STK17A, CST7, JUND, MYL9 ## SELL, MS4A6A, SEC14L2, KLRC1, MGST1, CD69, RP5-821D11.7, PRSS23, IER3, CD8B ## Negative: FCGR3A, PILRA, RP11-290F20.3, RHOC, MS4A7, HES4, LRRC25, CKB, SERPINA1, ABI3 ## COTL1, IFITM3, MS4A4A, EMR2, CDKN1C, VMO1, SPI1, LILRA3, CEBPB, WARS ## HCK, LST1, BID, IFITM2, ANXA5, TIMP1, CXCL16, ACTB, TPPP3, FCER1G ## IC_ 4 ## Positive: GZMB, NKG7, FGFBP2, CST7, PRF1, GNLY, GZMA, SPON2, CTSW, GZMH ## CCL4, XCL2, AKR1C3, CCL5, CLIC3, B2M, HOPX, PRSS23, TTC38, CD247 ## HAVCR2, APMAP, KLRF1, XCL1, GPR56, FCRL6, IGFBP7, FCGR3A, TPST2, CD160 ## Negative: LTB, VIM, AIF1, FTH1, COTL1, RPL10A, LST1, RPL19, EEF2, FTL ## LYZ, NAP1L1, S100A8, HLA-DRA, PLP2, CFP, CST3, CD68, CFD, FCN1 ## LGALS2, C6orf48, S100A9, GPX1, SERPINA1, CTSS, LINC00936, SAT1, SPI1, FAM26F ## IC_ 5 ## Positive: PF4, HIST1H2AC, PPBP, TSC22D1, ACRBP, TMEM40, PTCRA, NRGN, MAP3K7CL, SDPR ## GNG11, MMD, ITGA2B, HIST1H2BJ, TUBB1, ESAM, CLDN5, SPARC, CMTM5, RGS18 ## SLC40A1, F13A1, RUFY1, PCP2, GP9, NEXN, CD9, CA2, MPP1, PNMA1 ## Negative: RPL19, RPL10A, MALAT1, NACA, MT-CO1, RPS27A, GLTSCR2, VIM, SRSF3, B2M ## RBM3, TRAF3IP3, AES, CSNK2B, RAC2, HSP90AB1, NHP2L1, KLF6, VAMP8, EEF2 ## TSPO, NDUFA11, C1QBP, CDC37, IL32, PSMC5, ZFP36, MED28, COPS6, ISG15 6.2.2.4 Visualizing PCA in Different Ways DimPlot(seurat, reduction = &quot;pca&quot;) 6.2.2.5 Visualizing ICA in Different Ways DimPlot(seurat, reduction = &quot;ica&quot;) # ProjectDim scores each gene in the dataset (including genes not included # in the PCA) based on their correlation with the calculated components. # Though we don&#39;t use this further here, it can be used to identify markers # that are strongly correlated with cellular heterogeneity, but may not have # passed through variable gene selection. The results of the projected PCA # can be explored by setting use.full=T in the functions above seurat &lt;- ProjectDim(object = seurat, reduction = &quot;pca&quot;) ## PC_ 1 ## Positive: MALAT1, RPS27A, LTB, IL32, RPL10A, AES, GLTSCR2, RPL19, CD69, ACAP1 ## B2M, CD27, STK17A, CTSW, CD247, JUN, GIMAP5, RARRES3, SELL, CCL5 ## Negative: CST3, AIF1, TYROBP, LST1, FTL, FTH1, FCER1G, S100A9, LYZ, CFD ## FCN1, CD68, TYMP, LGALS1, IFITM3, SPI1, SERPINA1, CTSS, PSAP, S100A8 ## PC_ 2 ## Positive: NKG7, GZMB, CST7, PRF1, GZMA, FGFBP2, CTSW, B2M, GNLY, GZMH ## CCL5, SPON2, CD247, CCL4, XCL2, AKR1C3, FCGR3A, CLIC3, HOPX, SRGN ## Negative: CD79A, MS4A1, HLA-DQA1, HLA-DRA, HLA-DQB1, TCL1A, LINC00926, CD79B, VPREB3, CD74 ## HLA-DMA, HLA-DRB1, HLA-DPB1, HLA-DMB, BANK1, HLA-DPA1, HLA-DQA2, HLA-DRB5, CD37, EAF2 ## PC_ 3 ## Positive: HIST1H2AC, PF4, TSC22D1, ACRBP, PPBP, TMEM40, PTCRA, MAP3K7CL, SDPR, MMD ## TUBB1, HIST1H2BJ, NRGN, GNG11, ITGA2B, ESAM, CLDN5, CMTM5, SPARC, SLC40A1 ## Negative: RPL19, MT-CO1, S100A8, S100A4, LGALS2, S100A9, S100A6, TYROBP, CYBA, TSPO ## NACA, CCL3, FCN1, MS4A6A, CD14, GSTP1, NKG7, PRF1, IFI6, LGALS1 ## PC_ 4 ## Positive: VIM, FYB, TMSB4X, RGS10, S100A8, IL32, GIMAP7, S100A6, S100A4, MAL ## NDFIP1, NGFRAP1, CD27, GIMAP5, S100A9, CD14, S100A12, NELL2, CD44, LGALS2 ## Negative: HLA-DQA1, CD79A, CD79B, MS4A1, HLA-DQB1, CD74, HLA-DPB1, HLA-DRB1, HLA-DPA1, HLA-DRA ## LINC00926, HLA-DQA2, TCL1A, HLA-DRB5, VPREB3, GZMB, FGFBP2, HLA-DMB, BANK1, GNLY ## PC_ 5 ## Positive: LTB, NAP1L1, CKB, VMO1, MS4A4A, EMR2, CDKN1C, NACA, HES4, LYPD2 ## PILRA, MS4A7, TRAF3IP3, PTGES3, LILRA3, GDI2, VIM, RP11-290F20.3, RPS27A, RPL10A ## Negative: S100A8, LGALS2, GZMB, MS4A6A, S100A9, FGFBP2, GNLY, CD14, NKG7, S100A12 ## SPON2, CST7, CCL3, PRF1, GSTP1, GPX1, CCL4, VCAN, GZMA, TYROBP 6.2.2.6 Genes by PCs DimHeatmap(object = seurat, dims = 1:10, cells = 50, reduction = &quot;pca&quot;, balanced = TRUE) Check other PCs to plot PCHeatmap() seurat &lt;- JackStraw(object = seurat, reduction = &quot;pca&quot;) seurat &lt;- ScoreJackStraw(seurat, dims = 1:20) ElbowPlot(object = seurat, ndims = 10, reduction = &quot;pca&quot;) # save.SNN = T saves the SNN so that the clustering algorithm can be rerun # using the same graph but with a different resolution value (see docs for # full details) set.seed(2019) seurat &lt;- FindNeighbors(object = seurat, dims = 1:10) ## Computing nearest neighbor graph ## Computing SNN seurat &lt;- FindClusters(object = seurat, reduction = &quot;pca&quot;, dims = 1:10, resolution = 1) ## Warning: The following arguments are not used: reduction, dims ## Warning: The following arguments are not used: reduction, dims ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 987 ## Number of edges: 35554 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.7739 ## Number of communities: 8 ## Elapsed time: 0 seconds 6.2.3 Run non-linear dimensional reduction (UMAP/tSNE) Seurat offers several non-linear dimensional reduction techniques, such as tSNE and UMAP, to visualize and explore these datasets. The goal of these algorithms is to learn the underlying manifold of the data in order to place similar cells together in low-dimensional space. Cells within the graph-based clusters determined above should co-localize on these dimension reduction plots. As input to the UMAP and tSNE, we suggest using the same PCs as input to the clustering analysis. set.seed(runif(100)) seurat &lt;- RunTSNE(seurat, reduction.use = &quot;pca&quot;, dims.use = 1:10, perplexity=10) # note that you can set do.label=T to help label individual clusters DimPlot(object = seurat, reduction = &quot;tsne&quot;) set.seed(runif(100)) seurat &lt;- RunUMAP(seurat, dims = 1:10, perplexity=10) ## Warning: The following arguments are not used: perplexity ## 16:57:38 UMAP embedding parameters a = 0.9922 b = 1.112 ## 16:57:38 Read 987 rows and found 10 numeric columns ## 16:57:38 Using Annoy for neighbor search, n_neighbors = 30 ## 16:57:38 Building Annoy index with metric = cosine, n_trees = 50 ## 0% 10 20 30 40 50 60 70 80 90 100% ## [----|----|----|----|----|----|----|----|----|----| ## **************************************************| ## 16:57:38 Writing NN index file to temp file /var/folders/_1/7d41wl1d0nv1vxmgmcbn5jfj84xmh7/T//RtmpHKteoJ/file1357d476ddc5b ## 16:57:38 Searching Annoy index using 1 thread, search_k = 3000 ## 16:57:38 Annoy recall = 100% ## 16:57:39 Commencing smooth kNN distance calibration using 1 thread ## 16:57:40 Initializing from normalized Laplacian + noise ## 16:57:40 Commencing optimization for 500 epochs, with 38670 positive edges ## 16:57:42 Optimization finished # note that you can set do.label=T to help label individual clusters DimPlot(object = seurat, reduction = &quot;umap&quot;) # find all markers of cluster 1 cluster1.markers &lt;- FindMarkers(object = seurat, ident.1 = 1, min.pct = 0.25) print(x = head(x = cluster1.markers, n = 5)) ## p_val avg_logFC pct.1 pct.2 p_val_adj ## S100A8 1.586796e-147 3.698205 0.951 0.095 1.867024e-143 ## LGALS2 4.746642e-147 2.612902 0.886 0.056 5.584899e-143 ## S100A9 2.397414e-123 3.745692 0.978 0.217 2.820797e-119 ## MS4A6A 1.419272e-115 1.881602 0.674 0.024 1.669916e-111 ## FCN1 8.514604e-113 2.360585 0.924 0.154 1.001828e-108 # find all markers distinguishing cluster 2 from clusters 0 and 1 cluster5.markers &lt;- FindMarkers(object = seurat, ident.1 = 5, ident.2 = c(0, 1), min.pct = 0.25) print(x = head(x = cluster5.markers, n = 5)) ## p_val avg_logFC pct.1 pct.2 p_val_adj ## FCGR3A 3.353326e-65 2.6292920 0.968 0.089 3.945523e-61 ## RHOC 2.286079e-49 1.7673220 0.921 0.119 2.689801e-45 ## CDKN1C 1.882880e-39 0.9945063 0.460 0.007 2.215397e-35 ## HES4 5.069482e-37 1.1358796 0.619 0.047 5.964753e-33 ## CKB 1.398361e-35 0.9644735 0.365 0.000 1.645312e-31 # find markers for every cluster compared to all remaining cells, report # only the positive ones pbmc.markers &lt;- FindAllMarkers(object = seurat, only.pos = TRUE, min.pct = 0.25, thresh.use = 0.25) ## Calculating cluster 0 ## Calculating cluster 1 ## Calculating cluster 2 ## Calculating cluster 3 ## Calculating cluster 4 ## Calculating cluster 5 ## Calculating cluster 6 ## Calculating cluster 7 pbmc.markers %&gt;% group_by(cluster) %&gt;% top_n(2, avg_logFC) ## # A tibble: 16 x 7 ## # Groups: cluster [8] ## p_val avg_logFC pct.1 pct.2 p_val_adj cluster gene ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; ## 1 1.20e- 43 1.06 0.529 0.115 1.41e- 39 0 CCR7 ## 2 1.71e- 29 0.864 0.407 0.094 2.01e- 25 0 LEF1 ## 3 1.59e-147 3.70 0.951 0.095 1.87e-143 1 S100A8 ## 4 2.40e-123 3.75 0.978 0.217 2.82e-119 1 S100A9 ## 5 6.05e- 34 0.866 0.947 0.465 7.12e- 30 2 IL32 ## 6 2.94e- 33 0.961 0.988 0.665 3.45e- 29 2 LTB ## 7 1.47e-157 2.94 0.94 0.046 1.73e-153 3 CD79A ## 8 8.48e- 99 2.46 0.632 0.029 9.98e- 95 3 TCL1A ## 9 2.62e- 70 2.18 0.633 0.053 3.09e- 66 4 GZMK ## 10 3.31e- 63 2.00 0.959 0.247 3.90e- 59 4 CCL5 ## 11 1.27e- 69 2.24 0.968 0.137 1.49e- 65 5 FCGR3A ## 12 1.02e- 45 2.01 0.968 0.314 1.20e- 41 5 LST1 ## 13 2.28e-115 3.45 1 0.066 2.69e-111 6 GZMB ## 14 9.18e- 71 3.45 0.968 0.15 1.08e- 66 6 GNLY ## 15 6.56e- 7 0.911 0.571 0.303 7.72e- 3 7 CCL5 ## 16 2.92e- 5 0.853 0.375 0.184 3.43e- 1 7 LYAR 6.2.3.1 Finding differentially expressed features (cluster biomarkers) Seurat can help you find markers that define clusters via differential expression. By default, it identifes positive and negative markers of a single cluster (specified in ident.1), compared to all other cells. FindAllMarkers automates this process for all clusters, but you can also test groups of clusters vs. each other, or against all cells. The min.pct argument requires a feature to be detected at a minimum percentage in either of the two groups of cells, and the thresh.test argument requires a feature to be differentially expressed (on average) by some amount between the two groups. You can set both of these to 0, but with a dramatic increase in time - since this will test a large number of features that are unlikely to be highly discriminatory. As another option to speed up these computations, max.cells.per.ident can be set. This will downsample each identity class to have no more cells than whatever this is set to. While there is generally going to be a loss in power, the speed increases can be significiant and the most highly differentially expressed features will likely still rise to the top. cluster1.markers &lt;- FindMarkers(object = seurat, ident.1 = 0, thresh.use = 0.25, test.use = &quot;roc&quot;, only.pos = TRUE) ## Warning: The following arguments are not used: thresh.use VlnPlot(object = seurat, features = c(&quot;MS4A1&quot;, &quot;CD79A&quot;)) # you can plot raw UMI counts as well VlnPlot(object = seurat, features = c(&quot;NKG7&quot;, &quot;PF4&quot;), use.raw = TRUE, y.log = TRUE) ## Warning in as_grob.default(plot): Cannot convert object of class logical ## into a grob. ## Warning in as_grob.default(plot): Cannot convert object of class logical ## into a grob. ## Warning: Graphs cannot be vertically aligned unless the axis parameter is ## set. Placing graphs unaligned. ## Warning: Graphs cannot be horizontally aligned unless the axis parameter is ## set. Placing graphs unaligned. FeaturePlot(object = seurat, features = c(&quot;MS4A1&quot;, &quot;GNLY&quot;, &quot;CD3E&quot;, &quot;CD14&quot;, &quot;FCER1A&quot;, &quot;FCGR3A&quot;, &quot;LYZ&quot;, &quot;PPBP&quot;, &quot;CD8A&quot;), cols = c(&quot;grey&quot;, &quot;blue&quot;), reduction = &quot;tsne&quot;) top10 &lt;- pbmc.markers %&gt;% group_by(cluster) %&gt;% top_n(10, avg_logFC) # setting slim.col.label to TRUE will print just the cluster IDS instead of # every cell name DoHeatmap(object = seurat, features = top10$gene, label = TRUE) ## Warning in DoHeatmap(object = seurat, features = top10$gene, label = ## TRUE): The following features were omitted as they were not found in the ## scale.data slot for the RNA assay: RPL35, LYAR, CD8A, CD40LG, AQP3, CD2, ## IL7R, PIK3IP1, NOSIP, PRKCQ-AS1, CD3D, CD3E, LEF1, CCR7, LDHB new.cluster.ids &lt;- c(&quot;Memory CD4 T&quot;, &quot;CD14+ Mono&quot;, &quot;Naive CD4 T&quot;, &quot;B&quot;, &quot;CD8 T&quot;, &quot;FCGR3A+ Mono&quot;, &quot;NK&quot;, &quot;DC&quot;, &quot;Mk&quot;) names(x = new.cluster.ids) &lt;- levels(x = seurat) seurat &lt;- RenameIdents(object = seurat, new.cluster.ids) ## Warning: Cannot find identity NA DimPlot(object = seurat, reduction = &#39;umap&#39;, label = TRUE, pt.size = 0.5) + NoLegend() 6.2.3.2 Further subdivisions within cell types If you perturb some of our parameter choices above (for example, setting resolution=0.8 or changing the number of PCs), you might see the CD4 T cells subdivide into two groups. You can explore this subdivision to find markers separating the two T cell subsets. However, before reclustering (which will overwrite object@ident), we can stash our renamed identities to be easily recovered later. # First lets stash our identities for later seurat &lt;- StashIdent(object = seurat, save.name = &quot;ClusterNames_0.6&quot;) ## With Seurat 3.X, stashing identity classes can be accomplished with the following: ## seurat[[&quot;ClusterNames_0.6&quot;]] &lt;- Idents(object = seurat) # Note that if you set save.snn=T above, you don&#39;t need to recalculate the # SNN, and can simply put: pbmc &lt;- FindClusters(pbmc,resolution = 0.8) seurat &lt;- FindClusters(object = seurat, reduction = &quot;pca&quot;, dims = 1:10, resolution = 0.8) ## Warning: The following arguments are not used: reduction, dims ## Warning: The following arguments are not used: reduction, dims ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 987 ## Number of edges: 35554 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8065 ## Number of communities: 7 ## Elapsed time: 0 seconds ## Warning in BuildSNN(object = object, genes.use = genes.use, reduction.type ## = reduction.type, : Build parameters exactly match those of already ## computed and stored SNN. To force recalculation, set force.recalc to TRUE. # Demonstration of how to plot two tSNE plots side by side, and how to color # points based on different criteria plot1 &lt;- DimPlot(object = seurat, reduction= &quot;tsne&quot;, label = TRUE) + NoLegend() plot2 &lt;- TSNEPlot(object = seurat, reduction = &quot;tsne&quot;, group.by = &quot;ClusterNames_0.6&quot;, label = TRUE) + NoLegend() CombinePlots(list(plot1, plot2)) # Find discriminating markers tcell.markers &lt;- FindMarkers(object = seurat, ident.1 = 0, ident.2 = 1) # Most of the markers tend to be expressed in C1 (i.e. S100A4). However, we # can see that CCR7 is upregulated in C0, strongly indicating that we can # differentiate memory from naive CD4 cells. cols.use demarcates the color # palette from low to high expression FeaturePlot(object = seurat, features = c(&quot;S100A4&quot;, &quot;CCR7&quot;), cols = c(&quot;green&quot;, &quot;blue&quot;)) 6.3 Feature Selection 6.3.1 Differential Expression Analysis 6.3.1.1 Differential Expression Tests One of the most commonly performed tasks for RNA-seq data is differential gene expression (DE) analysis. Although well-established tools exist for such analysis in bulk RNA-seq data, methods for scRNA-seq data are just emerging. Given the special characteristics of scRNA-seq data, including generally low library sizes, high noise levels and a large fraction of so-called ‘dropout’ events, it is unclear whether DE methods that have been developed for bulk RNA-seq are suitable also for scRNA-seq. Check the help page out for the FindMarkers function by using ?FindMarkers ## Differential expression using DESeq2 FindMarkers(object = seurat, ident.1 = 0, ident.2 = 1, test.use = &quot;DESeq2&quot;) ## Use the help function and run other tests. Do they find similar markers? FindMarkers(object = seurat, ident.1 = 0, ident.2 = 1, test.use = ??) ## t-test FindMarkers(object = seurat, ident.1 = 0, ident.2 = 1, test.use = &quot;t&quot;) 6.3.2 Dimensionality Reduction 6.3.2.1 Principal Components Analysis (PCA) RunPCA() 6.3.3 Independent Components Analysis (ICA) RunICA() 6.3.4 Clustering 6.3.4.1 Kmeans 6.3.4.2 Louvain ## Neighborhood graph FindNeighbors(object, reduction = &quot;pca&quot;, dims = 1:10, assay = NULL, features = NULL, k.param = 20, compute.SNN = TRUE, prune.SNN = 1/15, nn.method = &quot;rann&quot;, annoy.metric = &quot;euclidean&quot;, nn.eps = 0, verbose = TRUE, force.recalc = FALSE, do.plot = FALSE, graph.name = NULL, ...) FindClusters(object, genes.use = NULL, reduction.type = &quot;pca&quot;, dims.use = NULL, k.param = 30, plot.SNN = FALSE, prune.SNN = 1/15, print.output = TRUE, distance.matrix = NULL, save.SNN = FALSE, reuse.SNN = FALSE, force.recalc = FALSE, nn.eps = 0, modularity.fxn = 1, resolution = 0.8, algorithm = 1, n.start = 100, n.iter = 10, random.seed = 0, temp.file.location = NULL, edge.file.name = NULL) 6.3.5 Check Clusters Use Classifier to predict cell cluster. See how it predicts using hold out data. reference # Assign the test object a three level attribute groups &lt;- sample(c(&quot;train&quot;, &quot;test&quot;), size = NROW(seurat@meta.data), replace = TRUE, prob = c(0.8, 0.2)) names(groups) &lt;- colnames(seurat) seurat &lt;- AddMetaData(object = seurat, metadata = groups, col.name = &quot;group&quot;) # Find Anchors seurat.list &lt;- SplitObject(seurat, split.by = &quot;group&quot;) seurat.anchors &lt;- FindIntegrationAnchors(object.list = seurat.list, dims = 1:30) ## Computing 2000 integration features ## Scaling features for provided objects ## Finding all pairwise anchors ## Running CCA ## Merging objects ## Finding neighborhoods ## Finding anchors ## Found 978 anchors ## Filtering anchors ## Retained 763 anchors ## Extracting within-dataset neighbors seurat.integrated &lt;- IntegrateData(anchorset = seurat.anchors, dims = 1:30) ## Merging dataset 1 into 2 ## Extracting anchors for merged samples ## Finding integration vectors ## Finding integration vector weights ## Integrating data seurat.query &lt;- seurat.list[[&quot;train&quot;]] seurat.anchors &lt;- FindTransferAnchors(reference = seurat.integrated, query = seurat.query, dims = 1:30) ## Performing PCA on the provided reference using 2000 features as input. ## Projecting PCA ## Finding neighborhoods ## Finding anchors ## Found 2423 anchors ## Filtering anchors ## Retained 2197 anchors ## Extracting within-dataset neighbors predictions &lt;- TransferData(anchorset = seurat.anchors, refdata = seurat.integrated$ClusterNames_0.6, dims = 1:30) ## Finding integration vectors ## Finding integration vector weights ## Predicting cell labels seurat.query &lt;- AddMetaData(seurat.query, metadata = predictions) table(seurat.query@meta.data$ClusterNames_0.6, seurat.query@meta.data$predicted.id) ## ## B CD14+ Mono CD8 T DC FCGR3A+ Mono Memory CD4 T ## Memory CD4 T 0 0 0 0 0 182 ## CD14+ Mono 0 150 0 0 1 0 ## Naive CD4 T 0 0 1 1 0 14 ## B 106 0 0 0 0 0 ## CD8 T 0 0 70 1 0 0 ## FCGR3A+ Mono 0 1 0 0 51 0 ## NK 0 0 2 0 0 0 ## DC 0 0 1 30 0 17 ## ## Naive CD4 T NK ## Memory CD4 T 0 0 ## CD14+ Mono 0 0 ## Naive CD4 T 113 0 ## B 0 0 ## CD8 T 2 0 ## FCGR3A+ Mono 0 0 ## NK 0 47 ## DC 0 0 Visually check by comparing centroids of clusters in gene space and embedding space. 6.3.6 View Entire Object Structure str(seurat) ## Formal class &#39;Seurat&#39; [package &quot;Seurat&quot;] with 12 slots ## ..@ assays :List of 1 ## .. ..$ RNA:Formal class &#39;Assay&#39; [package &quot;Seurat&quot;] with 7 slots ## .. .. .. ..@ counts :Formal class &#39;dgCMatrix&#39; [package &quot;Matrix&quot;] with 6 slots ## .. .. .. .. .. ..@ i : int [1:838799] 20 59 64 119 132 150 152 182 184 185 ... ## .. .. .. .. .. ..@ p : int [1:988] 0 779 2127 3253 4211 4732 5512 6292 7081 7612 ... ## .. .. .. .. .. ..@ Dim : int [1:2] 11766 987 ## .. .. .. .. .. ..@ Dimnames:List of 2 ## .. .. .. .. .. .. ..$ : chr [1:11766] &quot;LINC00115&quot; &quot;NOC2L&quot; &quot;KLHL17&quot; &quot;PLEKHN1&quot; ... ## .. .. .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. .. ..@ x : num [1:838799] 1 1 2 1 1 1 1 41 1 1 ... ## .. .. .. .. .. ..@ factors : list() ## .. .. .. ..@ data :Formal class &#39;dgCMatrix&#39; [package &quot;Matrix&quot;] with 6 slots ## .. .. .. .. .. ..@ i : int [1:838799] 20 59 64 119 132 150 152 182 184 185 ... ## .. .. .. .. .. ..@ p : int [1:988] 0 779 2127 3253 4211 4732 5512 6292 7081 7612 ... ## .. .. .. .. .. ..@ Dim : int [1:2] 11766 987 ## .. .. .. .. .. ..@ Dimnames:List of 2 ## .. .. .. .. .. .. ..$ : chr [1:11766] &quot;LINC00115&quot; &quot;NOC2L&quot; &quot;KLHL17&quot; &quot;PLEKHN1&quot; ... ## .. .. .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. .. ..@ x : num [1:838799] 1.64 1.64 2.23 1.64 1.64 ... ## .. .. .. .. .. ..@ factors : list() ## .. .. .. ..@ scale.data : num [1:2000, 1:987] -0.319 -0.317 -0.939 -0.154 -0.275 ... ## .. .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. .. ..$ : chr [1:2000] &quot;NOC2L&quot; &quot;HES4&quot; &quot;ISG15&quot; &quot;TNFRSF4&quot; ... ## .. .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. ..@ key : chr &quot;rna_&quot; ## .. .. .. ..@ var.features : chr [1:2000] &quot;LYZ&quot; &quot;S100A9&quot; &quot;FTL&quot; &quot;GNLY&quot; ... ## .. .. .. ..@ meta.features:&#39;data.frame&#39;: 11766 obs. of 5 variables: ## .. .. .. .. ..$ vst.mean : num [1:11766] 0.00507 0.11854 0.00405 0.00405 0.09321 ... ## .. .. .. .. ..$ vst.variance : num [1:11766] 0.00505 0.24658 0.00404 0.00404 0.1698 ... ## .. .. .. .. ..$ vst.variance.expected : num [1:11766] 0.0053 0.2029 0.00417 0.00417 0.14985 ... ## .. .. .. .. ..$ vst.variance.standardized: num [1:11766] 0.953 1.215 0.97 0.97 1.133 ... ## .. .. .. .. ..$ vst.variable : logi [1:11766] FALSE TRUE FALSE FALSE TRUE TRUE ... ## .. .. .. ..@ misc : NULL ## ..@ meta.data :&#39;data.frame&#39;: 987 obs. of 11 variables: ## .. ..$ orig.ident : Factor w/ 1 level &quot;10X_NSCLC&quot;: 1 1 1 1 1 1 1 1 1 1 ... ## .. ..$ nCount_RNA : num [1:987] 2419 4898 3144 2637 980 ... ## .. ..$ nFeature_RNA : int [1:987] 779 1348 1126 958 521 780 780 789 531 550 ... ## .. ..$ percent.mt : num [1:987] 3.018 3.797 0.891 1.744 1.224 ... ## .. ..$ barcode : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. ..$ batch_id : int [1:987] 0 1 1 2 0 2 2 1 1 0 ... ## .. ..$ RNA_snn_res.1 : Factor w/ 8 levels &quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,..: 8 4 3 2 7 3 5 5 8 2 ... ## .. ..$ seurat_clusters : Factor w/ 7 levels &quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,..: 4 5 3 2 7 3 4 4 4 2 ... ## .. ..$ ClusterNames_0.6: Factor w/ 8 levels &quot;Memory CD4 T&quot;,..: 8 4 3 2 7 3 5 5 8 2 ... ## .. ..$ RNA_snn_res.0.8 : Factor w/ 7 levels &quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,..: 4 5 3 2 7 3 4 4 4 2 ... ## .. ..$ group : chr [1:987] &quot;test&quot; &quot;test&quot; &quot;train&quot; &quot;train&quot; ... ## ..@ active.assay: chr &quot;RNA&quot; ## ..@ active.ident: Factor w/ 7 levels &quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,..: 4 5 3 2 7 3 4 4 4 2 ... ## .. ..- attr(*, &quot;names&quot;)= chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## ..@ graphs :List of 2 ## .. ..$ RNA_nn :Formal class &#39;Graph&#39; [package &quot;Seurat&quot;] with 6 slots ## .. .. .. ..@ i : int [1:19740] 0 41 77 119 171 212 215 231 232 265 ... ## .. .. .. ..@ p : int [1:988] 0 35 45 53 61 68 80 124 128 138 ... ## .. .. .. ..@ Dim : int [1:2] 987 987 ## .. .. .. ..@ Dimnames:List of 2 ## .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. ..@ x : num [1:19740] 1 1 1 1 1 1 1 1 1 1 ... ## .. .. .. ..@ factors : list() ## .. ..$ RNA_snn:Formal class &#39;Graph&#39; [package &quot;Seurat&quot;] with 6 slots ## .. .. .. ..@ i : int [1:72095] 0 5 8 12 41 67 77 112 119 123 ... ## .. .. .. ..@ p : int [1:988] 0 81 123 174 255 309 403 475 557 615 ... ## .. .. .. ..@ Dim : int [1:2] 987 987 ## .. .. .. ..@ Dimnames:List of 2 ## .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. ..@ x : num [1:72095] 1 0.0811 0.0811 0.0811 0.3333 ... ## .. .. .. ..@ factors : list() ## ..@ neighbors : list() ## ..@ reductions :List of 4 ## .. ..$ pca :Formal class &#39;DimReduc&#39; [package &quot;Seurat&quot;] with 8 slots ## .. .. .. ..@ cell.embeddings : num [1:987, 1:50] 5.102 0.331 2.578 -13.581 3.815 ... ## .. .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. .. ..$ : chr [1:50] &quot;PC_1&quot; &quot;PC_2&quot; &quot;PC_3&quot; &quot;PC_4&quot; ... ## .. .. .. ..@ feature.loadings : num [1:2000, 1:50] -0.1091 -0.1094 -0.1125 0.0151 -0.1107 ... ## .. .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. .. ..$ : chr [1:2000] &quot;LYZ&quot; &quot;S100A9&quot; &quot;FTL&quot; &quot;GNLY&quot; ... ## .. .. .. .. .. ..$ : chr [1:50] &quot;PC_1&quot; &quot;PC_2&quot; &quot;PC_3&quot; &quot;PC_4&quot; ... ## .. .. .. ..@ feature.loadings.projected: num [1:2000, 1:50] 661 -3169 -2757 789 205 ... ## .. .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. .. ..$ : chr [1:2000] &quot;NOC2L&quot; &quot;HES4&quot; &quot;ISG15&quot; &quot;TNFRSF4&quot; ... ## .. .. .. .. .. ..$ : chr [1:50] &quot;PC_1&quot; &quot;PC_2&quot; &quot;PC_3&quot; &quot;PC_4&quot; ... ## .. .. .. ..@ assay.used : chr &quot;RNA&quot; ## .. .. .. ..@ stdev : num [1:50] 7.39 4.8 4.17 4.05 3.46 ... ## .. .. .. ..@ key : chr &quot;PC_&quot; ## .. .. .. ..@ jackstraw :Formal class &#39;JackStrawData&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. .. .. ..@ empirical.p.values : num [1:2000, 1:20] 0 0 0 0.0005 0 0 0 0.0565 0 0 ... ## .. .. .. .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. .. .. .. ..$ : chr [1:2000] &quot;LYZ&quot; &quot;S100A9&quot; &quot;FTL&quot; &quot;GNLY&quot; ... ## .. .. .. .. .. .. .. ..$ : chr [1:20] &quot;PC1&quot; &quot;PC2&quot; &quot;PC3&quot; &quot;PC4&quot; ... ## .. .. .. .. .. ..@ fake.reduction.scores : num [1:2000, 1:20] 0.005743 0.006021 0.001467 -0.006214 -0.000962 ... ## .. .. .. .. .. ..@ empirical.p.values.full: logi [1, 1] NA ## .. .. .. .. .. ..@ overall.p.values : num [1:20, 1:2] 1 2 3 4 5 6 7 8 9 10 ... ## .. .. .. .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. .. .. .. ..$ : NULL ## .. .. .. .. .. .. .. ..$ : chr [1:2] &quot;PC&quot; &quot;Score&quot; ## .. .. .. ..@ misc :List of 1 ## .. .. .. .. ..$ total.variance: num 1761 ## .. ..$ ica :Formal class &#39;DimReduc&#39; [package &quot;Seurat&quot;] with 8 slots ## .. .. .. ..@ cell.embeddings : num [1:987, 1:5] 0.849 -0.887 1.308 -1.59 -0.706 ... ## .. .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. .. ..$ : chr [1:5] &quot;IC_1&quot; &quot;IC_2&quot; &quot;IC_3&quot; &quot;IC_4&quot; ... ## .. .. .. ..@ feature.loadings : num [1:2000, 1:5] -653.8 -691.6 -688.2 -23.3 -611.5 ... ## .. .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. .. ..$ : chr [1:2000] &quot;LYZ&quot; &quot;S100A9&quot; &quot;FTL&quot; &quot;GNLY&quot; ... ## .. .. .. .. .. ..$ : chr [1:5] &quot;IC_1&quot; &quot;IC_2&quot; &quot;IC_3&quot; &quot;IC_4&quot; ... ## .. .. .. ..@ feature.loadings.projected: num[0 , 0 ] ## .. .. .. ..@ assay.used : chr &quot;RNA&quot; ## .. .. .. ..@ stdev : num(0) ## .. .. .. ..@ key : chr &quot;IC_&quot; ## .. .. .. ..@ jackstraw :Formal class &#39;JackStrawData&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. .. .. ..@ empirical.p.values : num[0 , 0 ] ## .. .. .. .. .. ..@ fake.reduction.scores : num[0 , 0 ] ## .. .. .. .. .. ..@ empirical.p.values.full: num[0 , 0 ] ## .. .. .. .. .. ..@ overall.p.values : num[0 , 0 ] ## .. .. .. ..@ misc : list() ## .. ..$ tsne:Formal class &#39;DimReduc&#39; [package &quot;Seurat&quot;] with 8 slots ## .. .. .. ..@ cell.embeddings : num [1:987, 1:2] -8.12 8.47 -24.9 26.51 -3.99 ... ## .. .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. .. ..$ : chr [1:2] &quot;tSNE_1&quot; &quot;tSNE_2&quot; ## .. .. .. ..@ feature.loadings : num[0 , 0 ] ## .. .. .. ..@ feature.loadings.projected: num[0 , 0 ] ## .. .. .. ..@ assay.used : chr &quot;RNA&quot; ## .. .. .. ..@ stdev : num(0) ## .. .. .. ..@ key : chr &quot;tSNE_&quot; ## .. .. .. ..@ jackstraw :Formal class &#39;JackStrawData&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. .. .. ..@ empirical.p.values : num[0 , 0 ] ## .. .. .. .. .. ..@ fake.reduction.scores : num[0 , 0 ] ## .. .. .. .. .. ..@ empirical.p.values.full: num[0 , 0 ] ## .. .. .. .. .. ..@ overall.p.values : num[0 , 0 ] ## .. .. .. ..@ misc : list() ## .. ..$ umap:Formal class &#39;DimReduc&#39; [package &quot;Seurat&quot;] with 8 slots ## .. .. .. ..@ cell.embeddings : num [1:987, 1:2] -3.53 -4.396 -1.722 9.476 -0.423 ... ## .. .. .. .. ..- attr(*, &quot;scaled:center&quot;)= num [1:2] -1.302 0.637 ## .. .. .. .. ..- attr(*, &quot;dimnames&quot;)=List of 2 ## .. .. .. .. .. ..$ : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. .. ..$ : chr [1:2] &quot;UMAP_1&quot; &quot;UMAP_2&quot; ## .. .. .. ..@ feature.loadings : num[0 , 0 ] ## .. .. .. ..@ feature.loadings.projected: num[0 , 0 ] ## .. .. .. ..@ assay.used : chr &quot;RNA&quot; ## .. .. .. ..@ stdev : num(0) ## .. .. .. ..@ key : chr &quot;UMAP_&quot; ## .. .. .. ..@ jackstraw :Formal class &#39;JackStrawData&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. .. .. ..@ empirical.p.values : num[0 , 0 ] ## .. .. .. .. .. ..@ fake.reduction.scores : num[0 , 0 ] ## .. .. .. .. .. ..@ empirical.p.values.full: num[0 , 0 ] ## .. .. .. .. .. ..@ overall.p.values : num[0 , 0 ] ## .. .. .. ..@ misc : list() ## ..@ project.name: chr &quot;10X_NSCLC&quot; ## ..@ misc : list() ## ..@ version :Classes &#39;package_version&#39;, &#39;numeric_version&#39; hidden list of 1 ## .. ..$ : int [1:3] 3 1 1 ## ..@ commands :List of 12 ## .. ..$ NormalizeData.RNA :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;NormalizeData.RNA&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:55:48&quot; ## .. .. .. ..@ call.string: chr [1:2] &quot;NormalizeData(object = seurat, normalization.method = \\&quot;LogNormalize\\&quot;, &quot; &quot; scale.factor = 10000)&quot; ## .. .. .. ..@ params :List of 5 ## .. .. .. .. ..$ assay : chr &quot;RNA&quot; ## .. .. .. .. ..$ normalization.method: chr &quot;LogNormalize&quot; ## .. .. .. .. ..$ scale.factor : num 10000 ## .. .. .. .. ..$ margin : num 1 ## .. .. .. .. ..$ verbose : logi TRUE ## .. ..$ FindVariableFeatures.RNA:Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;FindVariableFeatures.RNA&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:55:48&quot; ## .. .. .. ..@ call.string: chr [1:2] &quot;FindVariableFeatures(object = seurat, mean.function = ExpMean, &quot; &quot; dispersion.function = LogVMR, do.plot = FALSE)&quot; ## .. .. .. ..@ params :List of 12 ## .. .. .. .. ..$ assay : chr &quot;RNA&quot; ## .. .. .. .. ..$ selection.method : chr &quot;vst&quot; ## .. .. .. .. ..$ loess.span : num 0.3 ## .. .. .. .. ..$ clip.max : chr &quot;auto&quot; ## .. .. .. .. ..$ mean.function :function (x) ## .. .. .. .. ..$ dispersion.function:function (x) ## .. .. .. .. ..$ num.bin : num 20 ## .. .. .. .. ..$ binning.method : chr &quot;equal_width&quot; ## .. .. .. .. ..$ nfeatures : num 2000 ## .. .. .. .. ..$ mean.cutoff : num [1:2] 0.1 8 ## .. .. .. .. ..$ dispersion.cutoff : num [1:2] 1 Inf ## .. .. .. .. ..$ verbose : logi TRUE ## .. ..$ ScaleData.RNA :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;ScaleData.RNA&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:55:58&quot; ## .. .. .. ..@ call.string: chr &quot;ScaleData(object = seurat, vars.to.regress = \\&quot;batch_id\\&quot;)&quot; ## .. .. .. ..@ params :List of 11 ## .. .. .. .. ..$ features : chr [1:2000] &quot;LYZ&quot; &quot;S100A9&quot; &quot;FTL&quot; &quot;GNLY&quot; ... ## .. .. .. .. ..$ assay : chr &quot;RNA&quot; ## .. .. .. .. ..$ vars.to.regress : chr &quot;batch_id&quot; ## .. .. .. .. ..$ model.use : chr &quot;linear&quot; ## .. .. .. .. ..$ use.umi : logi FALSE ## .. .. .. .. ..$ do.scale : logi TRUE ## .. .. .. .. ..$ do.center : logi TRUE ## .. .. .. .. ..$ scale.max : num 10 ## .. .. .. .. ..$ block.size : num 1000 ## .. .. .. .. ..$ min.cells.to.block: num 987 ## .. .. .. .. ..$ verbose : logi TRUE ## .. ..$ RunPCA.RNA :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;RunPCA.RNA&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:56:00&quot; ## .. .. .. ..@ call.string: chr [1:2] &quot;RunPCA(object = seurat, pc.genes = seurat@assays$RNA@var.genes, &quot; &quot; do.print = TRUE, pcs.print = 1:5, genes.print = 5)&quot; ## .. .. .. ..@ params :List of 10 ## .. .. .. .. ..$ assay : chr &quot;RNA&quot; ## .. .. .. .. ..$ npcs : num 50 ## .. .. .. .. ..$ rev.pca : logi FALSE ## .. .. .. .. ..$ weight.by.var : logi TRUE ## .. .. .. .. ..$ verbose : logi TRUE ## .. .. .. .. ..$ ndims.print : int [1:5] 1 2 3 4 5 ## .. .. .. .. ..$ nfeatures.print: num 30 ## .. .. .. .. ..$ reduction.name : chr &quot;pca&quot; ## .. .. .. .. ..$ reduction.key : chr &quot;PC_&quot; ## .. .. .. .. ..$ seed.use : num 42 ## .. ..$ RunICA.RNA :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;RunICA.RNA&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:56:15&quot; ## .. .. .. ..@ call.string: chr &quot;RunICA(seurat, nics = 5)&quot; ## .. .. .. ..@ params :List of 10 ## .. .. .. .. ..$ assay : chr &quot;RNA&quot; ## .. .. .. .. ..$ nics : num 5 ## .. .. .. .. ..$ rev.ica : logi FALSE ## .. .. .. .. ..$ ica.function : chr &quot;icafast&quot; ## .. .. .. .. ..$ verbose : logi TRUE ## .. .. .. .. ..$ ndims.print : int [1:5] 1 2 3 4 5 ## .. .. .. .. ..$ nfeatures.print: num 30 ## .. .. .. .. ..$ reduction.name : chr &quot;ica&quot; ## .. .. .. .. ..$ reduction.key : chr &quot;IC_&quot; ## .. .. .. .. ..$ seed.use : num 42 ## .. ..$ ProjectDim.RNA.pca :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;ProjectDim.RNA.pca&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:56:16&quot; ## .. .. .. ..@ call.string: chr &quot;ProjectDim(object = seurat, reduction = \\&quot;pca\\&quot;)&quot; ## .. .. .. ..@ params :List of 7 ## .. .. .. .. ..$ reduction : chr &quot;pca&quot; ## .. .. .. .. ..$ assay : chr &quot;RNA&quot; ## .. .. .. .. ..$ dims.print : int [1:5] 1 2 3 4 5 ## .. .. .. .. ..$ nfeatures.print: num 20 ## .. .. .. .. ..$ overwrite : logi FALSE ## .. .. .. .. ..$ do.center : logi FALSE ## .. .. .. .. ..$ verbose : logi TRUE ## .. ..$ JackStraw.RNA.pca :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;JackStraw.RNA.pca&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:57:34&quot; ## .. .. .. ..@ call.string: chr &quot;JackStraw(object = seurat, reduction = \\&quot;pca\\&quot;)&quot; ## .. .. .. ..@ params :List of 7 ## .. .. .. .. ..$ reduction : chr &quot;pca&quot; ## .. .. .. .. ..$ assay : chr &quot;RNA&quot; ## .. .. .. .. ..$ dims : num 20 ## .. .. .. .. ..$ num.replicate: num 100 ## .. .. .. .. ..$ prop.freq : num 0.01 ## .. .. .. .. ..$ verbose : logi TRUE ## .. .. .. .. ..$ maxit : num 1000 ## .. ..$ ScoreJackStraw :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;ScoreJackStraw&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:57:34&quot; ## .. .. .. ..@ call.string: chr &quot;ScoreJackStraw(seurat, dims = 1:20)&quot; ## .. .. .. ..@ params :List of 4 ## .. .. .. .. ..$ reduction : chr &quot;pca&quot; ## .. .. .. .. ..$ dims : int [1:20] 1 2 3 4 5 6 7 8 9 10 ... ## .. .. .. .. ..$ score.thresh: num 1e-05 ## .. .. .. .. ..$ do.plot : logi FALSE ## .. ..$ FindNeighbors.RNA.pca :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;FindNeighbors.RNA.pca&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:57:35&quot; ## .. .. .. ..@ call.string: chr &quot;FindNeighbors(object = seurat, dims = 1:10)&quot; ## .. .. .. ..@ params :List of 13 ## .. .. .. .. ..$ reduction : chr &quot;pca&quot; ## .. .. .. .. ..$ dims : int [1:10] 1 2 3 4 5 6 7 8 9 10 ## .. .. .. .. ..$ assay : chr &quot;RNA&quot; ## .. .. .. .. ..$ k.param : num 20 ## .. .. .. .. ..$ compute.SNN : logi TRUE ## .. .. .. .. ..$ prune.SNN : num 0.0667 ## .. .. .. .. ..$ nn.method : chr &quot;rann&quot; ## .. .. .. .. ..$ annoy.metric: chr &quot;euclidean&quot; ## .. .. .. .. ..$ nn.eps : num 0 ## .. .. .. .. ..$ verbose : logi TRUE ## .. .. .. .. ..$ force.recalc: logi FALSE ## .. .. .. .. ..$ do.plot : logi FALSE ## .. .. .. .. ..$ graph.name : chr [1:2] &quot;RNA_nn&quot; &quot;RNA_snn&quot; ## .. ..$ RunTSNE :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;RunTSNE&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:57:37&quot; ## .. .. .. ..@ call.string: chr [1:2] &quot;RunTSNE(seurat, reduction.use = \\&quot;pca\\&quot;, dims.use = 1:10, &quot; &quot; perplexity = 10)&quot; ## .. .. .. ..@ params :List of 9 ## .. .. .. .. ..$ reduction : chr &quot;pca&quot; ## .. .. .. .. ..$ cells : chr [1:987] &quot;AAACATACAACCAC&quot; &quot;AAACATTGAGCTAC&quot; &quot;AAACATTGATCAGC&quot; &quot;AAACCGTGCTTCCG&quot; ... ## .. .. .. .. ..$ dims : int [1:5] 1 2 3 4 5 ## .. .. .. .. ..$ seed.use : num 1 ## .. .. .. .. ..$ tsne.method : chr &quot;Rtsne&quot; ## .. .. .. .. ..$ add.iter : num 0 ## .. .. .. .. ..$ dim.embed : num 2 ## .. .. .. .. ..$ reduction.name: chr &quot;tsne&quot; ## .. .. .. .. ..$ reduction.key : chr &quot;tSNE_&quot; ## .. ..$ RunUMAP.RNA.pca :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;RunUMAP.RNA.pca&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:57:42&quot; ## .. .. .. ..@ call.string: chr &quot;RunUMAP(seurat, dims = 1:10, perplexity = 10)&quot; ## .. .. .. ..@ params :List of 20 ## .. .. .. .. ..$ dims : int [1:10] 1 2 3 4 5 6 7 8 9 10 ## .. .. .. .. ..$ reduction : chr &quot;pca&quot; ## .. .. .. .. ..$ assay : chr &quot;RNA&quot; ## .. .. .. .. ..$ umap.method : chr &quot;uwot&quot; ## .. .. .. .. ..$ n.neighbors : int 30 ## .. .. .. .. ..$ n.components : int 2 ## .. .. .. .. ..$ metric : chr &quot;cosine&quot; ## .. .. .. .. ..$ learning.rate : num 1 ## .. .. .. .. ..$ min.dist : num 0.3 ## .. .. .. .. ..$ spread : num 1 ## .. .. .. .. ..$ set.op.mix.ratio : num 1 ## .. .. .. .. ..$ local.connectivity : int 1 ## .. .. .. .. ..$ repulsion.strength : num 1 ## .. .. .. .. ..$ negative.sample.rate: int 5 ## .. .. .. .. ..$ uwot.sgd : logi FALSE ## .. .. .. .. ..$ seed.use : int 42 ## .. .. .. .. ..$ angular.rp.forest : logi FALSE ## .. .. .. .. ..$ verbose : logi TRUE ## .. .. .. .. ..$ reduction.name : chr &quot;umap&quot; ## .. .. .. .. ..$ reduction.key : chr &quot;UMAP_&quot; ## .. ..$ FindClusters :Formal class &#39;SeuratCommand&#39; [package &quot;Seurat&quot;] with 4 slots ## .. .. .. ..@ name : chr &quot;FindClusters&quot; ## .. .. .. ..@ time.stamp : POSIXct[1:1], format: &quot;2020-01-09 16:58:34&quot; ## .. .. .. ..@ call.string: chr [1:2] &quot;FindClusters(object = seurat, reduction = \\&quot;pca\\&quot;, dims = 1:10, &quot; &quot; resolution = 0.8)&quot; ## .. .. .. ..@ params :List of 9 ## .. .. .. .. ..$ graph.name : chr &quot;RNA_snn&quot; ## .. .. .. .. ..$ modularity.fxn : num 1 ## .. .. .. .. ..$ resolution : num 0.8 ## .. .. .. .. ..$ algorithm : num 1 ## .. .. .. .. ..$ n.start : num 10 ## .. .. .. .. ..$ n.iter : num 10 ## .. .. .. .. ..$ random.seed : num 0 ## .. .. .. .. ..$ group.singletons: logi TRUE ## .. .. .. .. ..$ verbose : logi TRUE ## ..@ tools : list() 6.3.6.1 Probabilistic (LDA) data(&quot;MouseDeng2014.FitGoM&quot;) names(MouseDeng2014.FitGoM) ## [1] &quot;clust_3&quot; &quot;clust_6&quot; omega &lt;- MouseDeng2014.FitGoM$clust_6$omega annotation &lt;- data.frame( sample_id = paste0(&quot;X&quot;, c(1:NROW(omega))), tissue_label = factor(rownames(omega), levels = rev(c(&quot;zy&quot;, &quot;early2cell&quot;, &quot;mid2cell&quot;, &quot;late2cell&quot;, &quot;4cell&quot;, &quot;8cell&quot;, &quot;16cell&quot;, &quot;earlyblast&quot;, &quot;midblast&quot;, &quot;lateblast&quot;))) ) rownames(omega) &lt;- annotation$sample_id; StructureGGplot(omega = omega, annotation = annotation, palette = RColorBrewer::brewer.pal(8, &quot;Accent&quot;), yaxis_label = &quot;Amplification batch&quot;, order_sample = TRUE, axis_tick = list(axis_ticks_length = .1, axis_ticks_lwd_y = .1, axis_ticks_lwd_x = .1, axis_label_size = 7, axis_label_face = &quot;bold&quot;)) set.seed(2019) ## Preprocessing Steps pbmc_small &lt;- NormalizeData(object = pbmc_small, normalization.method = &quot;LogNormalize&quot;, scale.factor = 10000) pbmc_small &lt;- RunPCA(object = pbmc_small) ## Warning in irlba(A = t(x = object), nv = npcs, ...): You&#39;re computing too ## large a percentage of total singular values, use a standard svd instead. ## Warning in irlba(A = t(x = object), nv = npcs, ...): did not converge-- ## results might be invalid!; try increasing work or maxit ## PC_ 1 ## Positive: SDPR, PF4, PPBP, TUBB1, CA2, TREML1, MYL9, PGRMC1, RUFY1, PARVB ## VDAC3, IGLL5, AKR1C3, CD1C, RP11-290F20.3, GNLY, S100A8, S100A9, HLA-DQA1, HLA-DPB1 ## Negative: HLA-DPB1, HLA-DQA1, S100A9, S100A8, GNLY, RP11-290F20.3, CD1C, AKR1C3, IGLL5, VDAC3 ## PARVB, RUFY1, PGRMC1, MYL9, TREML1, CA2, TUBB1, PPBP, PF4, SDPR ## PC_ 2 ## Positive: HLA-DPB1, HLA-DQA1, S100A8, S100A9, CD1C, RP11-290F20.3, PARVB, IGLL5, MYL9, SDPR ## PPBP, CA2, RUFY1, TREML1, PF4, TUBB1, PGRMC1, VDAC3, AKR1C3, GNLY ## Negative: GNLY, AKR1C3, VDAC3, PGRMC1, TUBB1, PF4, TREML1, RUFY1, CA2, PPBP ## SDPR, MYL9, IGLL5, PARVB, RP11-290F20.3, CD1C, S100A9, S100A8, HLA-DQA1, HLA-DPB1 ## PC_ 3 ## Positive: S100A9, S100A8, RP11-290F20.3, AKR1C3, PARVB, GNLY, PPBP, PGRMC1, MYL9, TUBB1 ## CA2, TREML1, SDPR, VDAC3, PF4, RUFY1, HLA-DPB1, IGLL5, CD1C, HLA-DQA1 ## Negative: HLA-DQA1, CD1C, IGLL5, HLA-DPB1, RUFY1, PF4, VDAC3, SDPR, TREML1, CA2 ## TUBB1, MYL9, PGRMC1, PPBP, GNLY, PARVB, AKR1C3, RP11-290F20.3, S100A8, S100A9 ## PC_ 4 ## Positive: IGLL5, RP11-290F20.3, VDAC3, PPBP, TUBB1, TREML1, PF4, CA2, PARVB, MYL9 ## SDPR, RUFY1, PGRMC1, S100A9, HLA-DQA1, HLA-DPB1, GNLY, S100A8, AKR1C3, CD1C ## Negative: CD1C, AKR1C3, S100A8, GNLY, HLA-DPB1, HLA-DQA1, S100A9, PGRMC1, RUFY1, SDPR ## MYL9, PARVB, CA2, PF4, TREML1, TUBB1, PPBP, VDAC3, RP11-290F20.3, IGLL5 ## PC_ 5 ## Positive: MYL9, PARVB, IGLL5, TREML1, AKR1C3, PGRMC1, HLA-DPB1, S100A9, TUBB1, PF4 ## SDPR, GNLY, PPBP, S100A8, CA2, HLA-DQA1, CD1C, RUFY1, RP11-290F20.3, VDAC3 ## Negative: VDAC3, RP11-290F20.3, RUFY1, CD1C, HLA-DQA1, CA2, S100A8, PPBP, GNLY, SDPR ## PF4, TUBB1, S100A9, HLA-DPB1, PGRMC1, AKR1C3, TREML1, IGLL5, PARVB, MYL9 pbmc_small &lt;- FindClusters(object = pbmc_small, reduction = &quot;pca&quot;, dims.use = 1:10, resolution = 1, print.output = 0) ## Warning: The following arguments are not used: reduction, dims.use, ## print.output ## Suggested parameter: dims instead of dims.use; verbose instead of print.output ## Warning: The following arguments are not used: reduction, dims.use, ## print.output ## Suggested parameter: dims instead of dims.use; verbose instead of print.output ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 80 ## Number of edges: 3124 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.1433 ## Number of communities: 3 ## Elapsed time: 0 seconds pbmc_counts &lt;- as.matrix(pbmc_small@assays$RNA@data) pbmc_meta &lt;- pbmc_small@meta.data gene_names &lt;- rownames(pbmc_counts) pbmc_FitGoM &lt;- FitGoM(t(pbmc_counts), K=4) ## options not specified: switching to default BIC, other choice is BF for Bayes factor ## Fitting a Grade of Membership model ## (Taddy M., AISTATS 2012, JMLR 22, ## http://proceedings.mlr.press/v22/taddy12/taddy12.pdf) ## ## Estimating on a 80 document collection. ## Fit and Bayes Factor Estimation for K = 4 ## log posterior increase: 1006, 69.7, 71, done. ## log BF( 4 ) = 5090.41 omega &lt;- data.frame(pbmc_FitGoM$fit$omega) annotation &lt;- data.frame(sample_id = rownames(omega), tissue_label = paste0(&quot;topic&quot;, 1:4)) colnames(omega) &lt;- paste0(&quot;topic&quot;, 1:4) rownames(omega) &lt;- annotation$sample_id; StructureGGplot(omega = omega, annotation = annotation, palette = RColorBrewer::brewer.pal(4, &quot;Dark2&quot;), yaxis_label = &quot;Cells&quot;, order_sample = TRUE, axis_tick = list(axis_ticks_length = .1, axis_ticks_lwd_y = .1, axis_ticks_lwd_x = .1, axis_label_size = 7, axis_label_face = &quot;bold&quot;)) # ## Add Topic Scores to Meta Data Part of the Seurat Object pbmc_small &lt;- AddMetaData(pbmc_small, omega) pbmc_small@meta.data %&gt;% group_by(RNA_snn_res.1) %&gt;% summarise(topic1 = mean(topic1), topic2 = mean(topic2), topic3 = mean(topic3), topic4 = mean(topic4)) ## # A tibble: 3 x 5 ## RNA_snn_res.1 topic1 topic2 topic3 topic4 ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 0.281 0.290 0.221 0.207 ## 2 1 0.913 0.0253 0.0170 0.0450 ## 3 2 0.595 0.0663 0.194 0.145 ## ggplot object, you can add layers p1 &lt;- DimPlot(pbmc_small, reduction = &quot;tsne&quot;) + labs(title = &quot;Resolution 1&quot;) ## return ggplot object p1 p2 &lt;- FeaturePlot(object = pbmc_small, features = c(&quot;topic1&quot;, &quot;topic2&quot;, &quot;topic3&quot;, &quot;topic4&quot;), cols = c(&quot;grey&quot;, &quot;blue&quot;), reduction = &quot;tsne&quot;) ## return ggplot object p2 CombinePlots(list(p1, p2)) ## Warning: Graphs cannot be vertically aligned unless the axis parameter is ## set. Placing graphs unaligned. 6.3.6.2 Extract Top Feature theta_mat &lt;- pbmc_FitGoM$fit$theta top_features &lt;- ExtractTopFeatures(theta_mat, top_features=100, method=&quot;poisson&quot;, options=&quot;min&quot;) gene_list &lt;- do.call(rbind, lapply(1:dim(top_features$indices)[1], function(x) gene_names[top_features$indices[x,]])) We tabulate the top \\(5\\) genes for these \\(6\\) clusters. out_table &lt;- do.call(rbind, lapply(1:5, function(i) toString(gene_list[,i]))) rownames(out_table) &lt;- paste(&quot;Cluster&quot;, c(1:5)) out_table ## [,1] ## Cluster 1 &quot;GRN, GNLY, GZMK, PIK3IP1&quot; ## Cluster 2 &quot;HLA-DMB, GZMB, HNRNPH1, TNFAIP8&quot; ## Cluster 3 &quot;IFI30, PRF1, SATB1, THYN1&quot; ## Cluster 4 &quot;LY86, GZMH, SIT1, SP100&quot; ## Cluster 5 &quot;PF4, CCL4, CRBN, CCR7&quot; 6.3.7 Practice Visualizing/Embedding 6.3.7.1 tSNE Change the parameter settings for tSNE RunTSNE() 6.3.7.2 UMAP Change the parameter settings for UMAP RunUMAP() 6.4 Other Options For Analysis More Seurat Vignettes Single Cell Analysis Workshop Hemberg Lab Course SingleCellExperiment Scanpy Pegasus "],
["references.html", "References", " References "]
]
